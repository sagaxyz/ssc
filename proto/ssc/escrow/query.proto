syntax = "proto3";
package ssc.escrow;

option go_package = "github.com/sagaxyz/ssc/x/escrow/types";

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

import "ssc/escrow/params.proto";
import "ssc/escrow/escrow.proto";

// this line is used by starport scaffolding # 1

// ---------------------------------------
// Query service
// ---------------------------------------
service Query {
  // Module params.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/ssc/escrow/params";
  }

  // Fetch the lightweight head record for a chainlet.
  rpc GetChainletAccount(QueryGetChainletAccountRequest)
      returns (QueryGetChainletAccountResponse) {
    option (google.api.http).get = "/ssc/escrow/chainlets/{chainId}";
  }

  // List all denom pools for a chainlet (paginated).
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/ssc/escrow/chainlets/{chainId}/pools";
  }

  // List funders for a specific {chainId, denom} pool (paginated).
  rpc Funders(QueryFundersRequest) returns (QueryFundersResponse) {
    option (google.api.http).get =
        "/ssc/escrow/chainlets/{chainId}/pools/{denom}/funders";
  }

  // Fetch a single funder row for {chainId, denom, address}.
  rpc Funder(QueryFunderSharesRequest) returns (QueryFunderSharesResponse) {
    option (google.api.http).get = "/ssc/escrow/chainlets/{chainId}/"
                                   "pools/{denom}/funders/{address}";
  }

  // Optional convenience: all positions for a wallet across chainlets/denoms
  // (paginated).
  rpc MyPositions(QueryFunderPositionsRequest)
      returns (QueryFunderPositionsResponse) {
    option (google.api.http).get = "/ssc/escrow/funders/{address}/positions";
  }

  // this line is used by starport scaffolding # 2
}

// ---------------------------------------
// Params
// ---------------------------------------
message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// ---------------------------------------
// Chainlet head
// ---------------------------------------
message QueryGetChainletAccountRequest { string chainId = 1; }

message QueryGetChainletAccountResponse {
  ChainletAccount account = 1 [ (gogoproto.nullable) = false ];
}

// ---------------------------------------
// Pools (per chainlet)
// ---------------------------------------
message QueryPoolsRequest {
  string chainId = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 98;
}

message QueryPoolsResponse {
  repeated DenomPool pools = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 98;
}

// ---------------------------------------
// Funders (per {chainlet, denom})
// ---------------------------------------
message QueryFundersRequest {
  string chainId = 1;
  string denom = 2;
  cosmos.base.query.v1beta1.PageRequest pagination = 98;
}

message FunderEntry {
  string address = 1;
  Funder funder = 2 [ (gogoproto.nullable) = false ];
}

message QueryFundersResponse {
  repeated FunderEntry funders = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 98;
}

// ---------------------------------------
// Single funder
// ---------------------------------------
message QueryFunderSharesRequest {
  string chainId = 1;
  string denom = 2;
  string address = 3;
}

message QueryFunderSharesResponse { Funder shares = 1; }

// ---------------------------------------
// Positions (reverse index)
// ---------------------------------------
message QueryFunderPositionsRequest {
  string address = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 98;
}

message Position {
  string chainId = 1;
  string denom = 2;
  Funder shares = 3 [ (gogoproto.nullable) = false ];
}

message QueryFunderPositionsResponse {
  repeated Position positions = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 98;
}

// this line is used by starport scaffolding # 3
