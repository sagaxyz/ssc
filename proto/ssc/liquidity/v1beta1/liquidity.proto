syntax = "proto3";
package ssc.liquidity.v1beta1;

import "ssc/liquidity/v1beta1/tx.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/sagaxyz/ssc/x/liquidity/types";
option (gogoproto.goproto_getters_all) = false;

// Structure for the pool type to distinguish the characteristics of the reserve pools.
message PoolType {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // This is the id of the pool type, which is used as a field in the pool.
    uint32 id = 1 [(gogoproto.moretags) = "yaml:\"id\""];

    // This is the name of the pool type, which is shown to users.
    string name = 2 [(gogoproto.moretags) = "yaml:\"name\""];

    // This is the minimum number of reserve coins for the pool type.
    uint32 min_reserve_coin_num = 3 [(gogoproto.moretags) = "yaml:\"min_reserve_coin_num\""];

    // This is the maximum number of reserve coins for the pool type.
    uint32 max_reserve_coin_num = 4 [(gogoproto.moretags) = "yaml:\"max_reserve_coin_num\""];

    // This is the description of the pool type.
    string description = 5 [(gogoproto.moretags) = "yaml:\"description\""];
}

// Params defines the parameters for the liquidity module.
message Params {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // The list of pool types that can be created.
    repeated PoolType pool_types = 1 [(gogoproto.nullable) = false, (gogoproto.moretags) = "yaml:\"pool_types\""];

    // The minimum number of coins to be deposited to the liquidity pool on pool creation.
    string min_init_deposit_amount = 2 [(gogoproto.moretags) = "yaml:\"min_init_deposit_amount\"",
        (gogoproto.customtype) = "cosmossdk.io/math.Int",
        (gogoproto.nullable) = false];

    // The initial pool coin amount to be minted on pool creation.
    string init_pool_coin_mint_amount = 3 [(gogoproto.moretags) = "yaml:\"init_pool_coin_mint_amount\"",
        (gogoproto.customtype) = "cosmossdk.io/math.Int",
        (gogoproto.nullable) = false];

    // The maximum number of coins that can be deposited to the liquidity pool.
    string max_reserve_coin_amount = 4 [(gogoproto.moretags) = "yaml:\"max_reserve_coin_amount\"",
        (gogoproto.customtype) = "cosmossdk.io/math.Int",
        (gogoproto.nullable) = false];

    // The fee for creating a liquidity pool.
    repeated cosmos.base.v1beta1.Coin pool_creation_fee = 5 [(gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"pool_creation_fee\"",
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];

    // The fee for swapping coins in the liquidity pool.
    string swap_fee_rate = 6 [(gogoproto.moretags) = "yaml:\"swap_fee_rate\"",
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
        (gogoproto.nullable) = false];

    // The fee for withdrawing coins from the liquidity pool.
    string withdraw_fee_rate = 7 [(gogoproto.moretags) = "yaml:\"withdraw_fee_rate\"",
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
        (gogoproto.nullable) = false];

    // The maximum ratio of coins that can be ordered at once.
    string max_order_amount_ratio = 8 [(gogoproto.moretags) = "yaml:\"max_order_amount_ratio\"",
        (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
        (gogoproto.nullable) = false];

    // The unit batch height for the liquidity pool.
    uint32 unit_batch_height = 9 [(gogoproto.moretags) = "yaml:\"unit_batch_height\""];

    // The circuit breaker is enabled for the liquidity pool.
    bool circuit_breaker_enabled = 10 [(gogoproto.moretags) = "yaml:\"circuit_breaker_enabled\""];
}

// Pool defines the liquidity pool that contains pool information.
message Pool {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // id of the pool
    uint64 id = 1 [(gogoproto.moretags) = "yaml:\"id\""];

    // id of the pool type
    uint32 type_id = 2 [(gogoproto.moretags) = "yaml:\"type_id\""];

    // denoms of reserve coin pair of the pool
    repeated string reserve_coin_denoms = 3 [(gogoproto.moretags) = "yaml:\"reserve_coin_denoms\""];

    // reserve account address of the pool
    string reserve_account_address = 4 [(gogoproto.moretags) = "yaml:\"reserve_account_address\""];

    // denom of pool coin of the pool
    string pool_coin_denom = 5 [(gogoproto.moretags) = "yaml:\"pool_coin_denom\""];
}

// PoolMetadata defines the pool metadata that contains pool metadata.
message PoolMetadata {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // id of the pool
    uint64 pool_id = 1 [(gogoproto.moretags) = "yaml:\"pool_id\""];

    // denom of pool coin of the pool
    cosmos.base.v1beta1.Coin pool_coin_total_supply = 2 [(gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"pool_coin_total_supply\""];

    // reserve coins deposited in the pool
    repeated cosmos.base.v1beta1.Coin reserve_coins = 3 [(gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"reserve_coins\"",
        (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"];
}

// PoolBatch defines the batch or batches of a given liquidity pool that is either executed or aborted.
message PoolBatch {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // id of the pool
    uint64 pool_id = 1 [(gogoproto.moretags) = "yaml:\"pool_id\""];

    // index of this batch
    uint64 index = 2 [(gogoproto.moretags) = "yaml:\"index\""];

    // height where this batch is started
    uint64 begin_height = 3 [(gogoproto.moretags) = "yaml:\"begin_height\""];

    // last index of DepositMsgState
    uint64 deposit_msg_index = 4 [(gogoproto.moretags) = "yaml:\"deposit_msg_index\""];

    // last index of WithdrawMsgState
    uint64 withdraw_msg_index = 5 [(gogoproto.moretags) = "yaml:\"withdraw_msg_index\""];

    // last index of SwapMsgState
    uint64 swap_msg_index = 6 [(gogoproto.moretags) = "yaml:\"swap_msg_index\""];

    // true if batch is already executed, false if not executed
    bool executed = 7 [(gogoproto.moretags) = "yaml:\"executed\""];
}

// DepositMsgState defines the state of deposit message that is executed in the next batch of the liquidity pool.
message DepositMsgState {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // height where this message is appended to the batch
    uint64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\""];

    // index of this deposit message in this liquidity pool
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\""];

    // true if executed on this batch, false if not executed
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\""];

    // true if executed successfully on this batch, false if failed
    bool succeeded = 4 [(gogoproto.moretags) = "yaml:\"succeeded\""];

    // true if ready to be deleted on kvstore, false if not ready to be deleted
    bool to_be_deleted = 5 [(gogoproto.moretags) = "yaml:\"to_be_deleted\""];

    // MsgDepositWithinBatch
    MsgDepositWithinBatch msg = 6 [(gogoproto.moretags) = "yaml:\"msg\""];
}

// WithdrawMsgState defines the state of the withdraw message that is executed in the next batch of the liquidity pool.
message WithdrawMsgState {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // height where this message is appended to the batch
    uint64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\""];

    // index of this withdraw message in this liquidity pool
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\""];

    // true if executed on this batch, false if not executed
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\""];

    // true if executed successfully on this batch, false if failed
    bool succeeded = 4 [(gogoproto.moretags) = "yaml:\"succeeded\""];

    // true if ready to be deleted on kvstore, false if not ready to be deleted
    bool to_be_deleted = 5 [(gogoproto.moretags) = "yaml:\"to_be_deleted\""];

    // MsgWithdrawWithinBatch
    MsgWithdrawWithinBatch msg = 6 [(gogoproto.moretags) = "yaml:\"msg\""];
}

// SwapMsgState defines the state of the swap message that is executed in the next batch of the liquidity pool.
message SwapMsgState {
    option (gogoproto.equal) = true;
    option (gogoproto.goproto_stringer) = true;

    // height where this message is appended to the batch
    uint64 msg_height = 1 [(gogoproto.moretags) = "yaml:\"msg_height\""];

    // index of this swap message in this liquidity pool
    uint64 msg_index = 2 [(gogoproto.moretags) = "yaml:\"msg_index\""];

    // true if executed on this batch, false if not executed
    bool executed = 3 [(gogoproto.moretags) = "yaml:\"executed\""];

    // true if executed successfully on this batch, false if failed
    bool succeeded = 4 [(gogoproto.moretags) = "yaml:\"succeeded\""];

    // true if ready to be deleted on kvstore, false if not ready to be deleted
    bool to_be_deleted = 5 [(gogoproto.moretags) = "yaml:\"to_be_deleted\""];

    // order expiry height for this swap message
    uint64 order_expiry_height = 6 [(gogoproto.moretags) = "yaml:\"order_expiry_height\""];

    // remaining offer coin
    cosmos.base.v1beta1.Coin exchanged_offer_coin = 7 [(gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"exchanged_offer_coin\""];

    // remaining offer coin
    cosmos.base.v1beta1.Coin remaining_offer_coin = 8 [(gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"remaining_offer_coin\""];

    // reserved offer coin fee
    cosmos.base.v1beta1.Coin reserved_offer_coin_fee = 9 [(gogoproto.nullable) = false,
        (gogoproto.moretags) = "yaml:\"reserved_offer_coin_fee\""];

    // MsgSwapWithinBatch
    MsgSwapWithinBatch msg = 10 [(gogoproto.moretags) = "yaml:\"msg\""];
}