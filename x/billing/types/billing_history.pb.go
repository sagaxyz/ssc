// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/billing/billing_history.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BillingHistory struct {
	ChainletOwner     string `protobuf:"bytes,1,opt,name=chainletOwner,proto3" json:"chainletOwner,omitempty"`
	ChainletName      string `protobuf:"bytes,2,opt,name=chainletName,proto3" json:"chainletName,omitempty"`
	ChainletId        string `protobuf:"bytes,3,opt,name=chainletId,proto3" json:"chainletId,omitempty"`
	ChainletStackName string `protobuf:"bytes,4,opt,name=chainletStackName,proto3" json:"chainletStackName,omitempty"`
	EpochIdentifier   string `protobuf:"bytes,5,opt,name=epochIdentifier,proto3" json:"epochIdentifier,omitempty"`
	EpochNumber       int32  `protobuf:"varint,6,opt,name=epochNumber,proto3" json:"epochNumber,omitempty"`
	EpochStartTime    string `protobuf:"bytes,7,opt,name=epochStartTime,proto3" json:"epochStartTime,omitempty"`
	BilledAmount      string `protobuf:"bytes,8,opt,name=billedAmount,proto3" json:"billedAmount,omitempty"`
}

func (m *BillingHistory) Reset()         { *m = BillingHistory{} }
func (m *BillingHistory) String() string { return proto.CompactTextString(m) }
func (*BillingHistory) ProtoMessage()    {}
func (*BillingHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_b2a9cabf2a680108, []int{0}
}
func (m *BillingHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BillingHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BillingHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BillingHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BillingHistory.Merge(m, src)
}
func (m *BillingHistory) XXX_Size() int {
	return m.Size()
}
func (m *BillingHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_BillingHistory.DiscardUnknown(m)
}

var xxx_messageInfo_BillingHistory proto.InternalMessageInfo

func (m *BillingHistory) GetChainletOwner() string {
	if m != nil {
		return m.ChainletOwner
	}
	return ""
}

func (m *BillingHistory) GetChainletName() string {
	if m != nil {
		return m.ChainletName
	}
	return ""
}

func (m *BillingHistory) GetChainletId() string {
	if m != nil {
		return m.ChainletId
	}
	return ""
}

func (m *BillingHistory) GetChainletStackName() string {
	if m != nil {
		return m.ChainletStackName
	}
	return ""
}

func (m *BillingHistory) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *BillingHistory) GetEpochNumber() int32 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *BillingHistory) GetEpochStartTime() string {
	if m != nil {
		return m.EpochStartTime
	}
	return ""
}

func (m *BillingHistory) GetBilledAmount() string {
	if m != nil {
		return m.BilledAmount
	}
	return ""
}

func init() {
	proto.RegisterType((*BillingHistory)(nil), "ssc.billing.BillingHistory")
}

func init() { proto.RegisterFile("ssc/billing/billing_history.proto", fileDescriptor_b2a9cabf2a680108) }

var fileDescriptor_b2a9cabf2a680108 = []byte{
	// 294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xb1, 0x4e, 0xeb, 0x30,
	0x14, 0x86, 0xeb, 0xde, 0xdb, 0x02, 0x2e, 0x14, 0xe1, 0xc9, 0x93, 0x55, 0x2a, 0x54, 0x65, 0x40,
	0xc9, 0xc0, 0x0b, 0x40, 0x27, 0xba, 0x14, 0xa9, 0x65, 0x62, 0x41, 0x8e, 0x63, 0x12, 0x8b, 0x24,
	0x8e, 0x6c, 0x47, 0x34, 0x3c, 0x05, 0x8f, 0xc4, 0xc8, 0xd8, 0x91, 0x11, 0x25, 0x2f, 0x82, 0xe2,
	0x10, 0x94, 0x96, 0x29, 0xf9, 0xbf, 0xf3, 0xe9, 0x48, 0xc7, 0x3f, 0x3c, 0xd7, 0x9a, 0x79, 0xbe,
	0x88, 0x63, 0x91, 0x86, 0xed, 0xf7, 0x31, 0x12, 0xda, 0x48, 0x55, 0xb8, 0x99, 0x92, 0x46, 0xa2,
	0x91, 0xd6, 0xcc, 0xfd, 0x19, 0x4d, 0xdf, 0xfb, 0x70, 0x3c, 0x6f, 0xfe, 0x6f, 0x1b, 0x0b, 0x5d,
	0xc0, 0x13, 0x16, 0x51, 0x91, 0xc6, 0xdc, 0xdc, 0xbd, 0xa4, 0x5c, 0x61, 0x30, 0x01, 0xce, 0xd1,
	0x6a, 0x17, 0xa2, 0x29, 0x3c, 0x6e, 0xc1, 0x92, 0x26, 0x1c, 0xf7, 0xad, 0xb4, 0xc3, 0x10, 0x81,
	0xb0, 0xcd, 0x8b, 0x00, 0xff, 0xb3, 0x46, 0x87, 0xa0, 0x4b, 0x78, 0xd6, 0xa6, 0xb5, 0xa1, 0xec,
	0xd9, 0x2e, 0xfa, 0x6f, 0xb5, 0xbf, 0x03, 0xe4, 0xc0, 0x53, 0x9e, 0x49, 0x16, 0x2d, 0x02, 0x9e,
	0x1a, 0xf1, 0x24, 0xb8, 0xc2, 0x03, 0xeb, 0xee, 0x63, 0x34, 0x81, 0x23, 0x8b, 0x96, 0x79, 0xe2,
	0x73, 0x85, 0x87, 0x13, 0xe0, 0x0c, 0x56, 0x5d, 0x84, 0x66, 0x70, 0x6c, 0xe3, 0xda, 0x50, 0x65,
	0xee, 0x45, 0xc2, 0xf1, 0x81, 0x5d, 0xb5, 0x47, 0xeb, 0x2b, 0xeb, 0x97, 0xe2, 0xc1, 0x4d, 0x22,
	0xf3, 0xd4, 0xe0, 0xc3, 0xe6, 0xca, 0x2e, 0x9b, 0x5f, 0x7f, 0x94, 0x04, 0x6c, 0x4b, 0x02, 0xbe,
	0x4a, 0x02, 0xde, 0x2a, 0xd2, 0xdb, 0x56, 0xa4, 0xf7, 0x59, 0x91, 0xde, 0xc3, 0x2c, 0x14, 0x26,
	0xca, 0x7d, 0x97, 0xc9, 0xc4, 0xd3, 0x34, 0xa4, 0x9b, 0xe2, 0xd5, 0xab, 0xfb, 0xd9, 0xfc, 0x36,
	0x64, 0x8a, 0x8c, 0x6b, 0x7f, 0x68, 0x8b, 0xb9, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x8f,
	0xc5, 0xbb, 0xbd, 0x01, 0x00, 0x00,
}

func (m *BillingHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BillingHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BillingHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BilledAmount) > 0 {
		i -= len(m.BilledAmount)
		copy(dAtA[i:], m.BilledAmount)
		i = encodeVarintBillingHistory(dAtA, i, uint64(len(m.BilledAmount)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.EpochStartTime) > 0 {
		i -= len(m.EpochStartTime)
		copy(dAtA[i:], m.EpochStartTime)
		i = encodeVarintBillingHistory(dAtA, i, uint64(len(m.EpochStartTime)))
		i--
		dAtA[i] = 0x3a
	}
	if m.EpochNumber != 0 {
		i = encodeVarintBillingHistory(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x30
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintBillingHistory(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChainletStackName) > 0 {
		i -= len(m.ChainletStackName)
		copy(dAtA[i:], m.ChainletStackName)
		i = encodeVarintBillingHistory(dAtA, i, uint64(len(m.ChainletStackName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainletId) > 0 {
		i -= len(m.ChainletId)
		copy(dAtA[i:], m.ChainletId)
		i = encodeVarintBillingHistory(dAtA, i, uint64(len(m.ChainletId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainletName) > 0 {
		i -= len(m.ChainletName)
		copy(dAtA[i:], m.ChainletName)
		i = encodeVarintBillingHistory(dAtA, i, uint64(len(m.ChainletName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainletOwner) > 0 {
		i -= len(m.ChainletOwner)
		copy(dAtA[i:], m.ChainletOwner)
		i = encodeVarintBillingHistory(dAtA, i, uint64(len(m.ChainletOwner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBillingHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovBillingHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BillingHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainletOwner)
	if l > 0 {
		n += 1 + l + sovBillingHistory(uint64(l))
	}
	l = len(m.ChainletName)
	if l > 0 {
		n += 1 + l + sovBillingHistory(uint64(l))
	}
	l = len(m.ChainletId)
	if l > 0 {
		n += 1 + l + sovBillingHistory(uint64(l))
	}
	l = len(m.ChainletStackName)
	if l > 0 {
		n += 1 + l + sovBillingHistory(uint64(l))
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovBillingHistory(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovBillingHistory(uint64(m.EpochNumber))
	}
	l = len(m.EpochStartTime)
	if l > 0 {
		n += 1 + l + sovBillingHistory(uint64(l))
	}
	l = len(m.BilledAmount)
	if l > 0 {
		n += 1 + l + sovBillingHistory(uint64(l))
	}
	return n
}

func sovBillingHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBillingHistory(x uint64) (n int) {
	return sovBillingHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BillingHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBillingHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BillingHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BillingHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletStackName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletStackName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BilledAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BilledAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBillingHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBillingHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBillingHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBillingHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBillingHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBillingHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBillingHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBillingHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBillingHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBillingHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBillingHistory = fmt.Errorf("proto: unexpected end of group")
)
