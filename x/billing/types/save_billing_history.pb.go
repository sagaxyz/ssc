// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/billing/save_billing_history.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SaveBillingHistory struct {
	ChainletId      string `protobuf:"bytes,1,opt,name=chainletId,proto3" json:"chainletId,omitempty"`
	EpochIdentifier string `protobuf:"bytes,2,opt,name=epochIdentifier,proto3" json:"epochIdentifier,omitempty"`
	EpochNumber     int32  `protobuf:"varint,3,opt,name=epochNumber,proto3" json:"epochNumber,omitempty"`
	BilledAmount    string `protobuf:"bytes,4,opt,name=billedAmount,proto3" json:"billedAmount,omitempty"`
}

func (m *SaveBillingHistory) Reset()         { *m = SaveBillingHistory{} }
func (m *SaveBillingHistory) String() string { return proto.CompactTextString(m) }
func (*SaveBillingHistory) ProtoMessage()    {}
func (*SaveBillingHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_26420f58771dffb0, []int{0}
}
func (m *SaveBillingHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveBillingHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveBillingHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveBillingHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveBillingHistory.Merge(m, src)
}
func (m *SaveBillingHistory) XXX_Size() int {
	return m.Size()
}
func (m *SaveBillingHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveBillingHistory.DiscardUnknown(m)
}

var xxx_messageInfo_SaveBillingHistory proto.InternalMessageInfo

func (m *SaveBillingHistory) GetChainletId() string {
	if m != nil {
		return m.ChainletId
	}
	return ""
}

func (m *SaveBillingHistory) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *SaveBillingHistory) GetEpochNumber() int32 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *SaveBillingHistory) GetBilledAmount() string {
	if m != nil {
		return m.BilledAmount
	}
	return ""
}

func init() {
	proto.RegisterType((*SaveBillingHistory)(nil), "ssc.billing.SaveBillingHistory")
}

func init() {
	proto.RegisterFile("ssc/billing/save_billing_history.proto", fileDescriptor_26420f58771dffb0)
}

var fileDescriptor_26420f58771dffb0 = []byte{
	// 235 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2b, 0x2e, 0x4e, 0xd6,
	0x4f, 0xca, 0xcc, 0xc9, 0xc9, 0xcc, 0x4b, 0xd7, 0x2f, 0x4e, 0x2c, 0x4b, 0x8d, 0x87, 0x72, 0xe2,
	0x33, 0x32, 0x8b, 0x4b, 0xf2, 0x8b, 0x2a, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xb8, 0x8b,
	0x8b, 0x93, 0xf5, 0xa0, 0x52, 0x4a, 0x4b, 0x18, 0xb9, 0x84, 0x82, 0x13, 0xcb, 0x52, 0x9d, 0x20,
	0x7c, 0x0f, 0x88, 0x4a, 0x21, 0x39, 0x2e, 0xae, 0xe4, 0x8c, 0xc4, 0xcc, 0xbc, 0x9c, 0xd4, 0x12,
	0xcf, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x24, 0x11, 0x21, 0x0d, 0x2e, 0xfe, 0xd4,
	0x82, 0xfc, 0xe4, 0x0c, 0xcf, 0x94, 0xd4, 0xbc, 0x92, 0xcc, 0xb4, 0xcc, 0xd4, 0x22, 0x09, 0x26,
	0xb0, 0x22, 0x74, 0x61, 0x21, 0x05, 0x2e, 0x6e, 0xb0, 0x90, 0x5f, 0x69, 0x6e, 0x52, 0x6a, 0x91,
	0x04, 0xb3, 0x02, 0xa3, 0x06, 0x6b, 0x10, 0xb2, 0x90, 0x90, 0x12, 0x17, 0x0f, 0xc8, 0x35, 0xa9,
	0x29, 0x8e, 0xb9, 0xf9, 0xa5, 0x79, 0x25, 0x12, 0x2c, 0x60, 0x83, 0x50, 0xc4, 0x9c, 0x1c, 0x4e,
	0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18,
	0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0x4a, 0x2d, 0x3d, 0xb3, 0x24, 0xa3, 0x34,
	0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0x38, 0x31, 0x3d, 0xb1, 0xa2, 0xb2, 0x4a, 0x1f, 0x14, 0x10,
	0x15, 0xf0, 0xa0, 0x28, 0xa9, 0x2c, 0x48, 0x2d, 0x4e, 0x62, 0x03, 0x7b, 0xde, 0x18, 0x10, 0x00,
	0x00, 0xff, 0xff, 0xc4, 0xbe, 0xaf, 0x0f, 0x26, 0x01, 0x00, 0x00,
}

func (m *SaveBillingHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveBillingHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveBillingHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BilledAmount) > 0 {
		i -= len(m.BilledAmount)
		copy(dAtA[i:], m.BilledAmount)
		i = encodeVarintSaveBillingHistory(dAtA, i, uint64(len(m.BilledAmount)))
		i--
		dAtA[i] = 0x22
	}
	if m.EpochNumber != 0 {
		i = encodeVarintSaveBillingHistory(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintSaveBillingHistory(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainletId) > 0 {
		i -= len(m.ChainletId)
		copy(dAtA[i:], m.ChainletId)
		i = encodeVarintSaveBillingHistory(dAtA, i, uint64(len(m.ChainletId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSaveBillingHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovSaveBillingHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SaveBillingHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainletId)
	if l > 0 {
		n += 1 + l + sovSaveBillingHistory(uint64(l))
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovSaveBillingHistory(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovSaveBillingHistory(uint64(m.EpochNumber))
	}
	l = len(m.BilledAmount)
	if l > 0 {
		n += 1 + l + sovSaveBillingHistory(uint64(l))
	}
	return n
}

func sovSaveBillingHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSaveBillingHistory(x uint64) (n int) {
	return sovSaveBillingHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SaveBillingHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSaveBillingHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveBillingHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveBillingHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSaveBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSaveBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSaveBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSaveBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSaveBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSaveBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSaveBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BilledAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSaveBillingHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSaveBillingHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSaveBillingHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BilledAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSaveBillingHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSaveBillingHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSaveBillingHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSaveBillingHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSaveBillingHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSaveBillingHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSaveBillingHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSaveBillingHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSaveBillingHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSaveBillingHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSaveBillingHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSaveBillingHistory = fmt.Errorf("proto: unexpected end of group")
)
