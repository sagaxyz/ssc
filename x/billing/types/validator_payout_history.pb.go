// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/billing/validator_payout_history.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ValidatorPayoutHistory struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
	EpochIdentifier  string `protobuf:"bytes,2,opt,name=epochIdentifier,proto3" json:"epochIdentifier,omitempty"`
	EpochNumber      int32  `protobuf:"varint,3,opt,name=epochNumber,proto3" json:"epochNumber,omitempty"`
	EpochStartTime   string `protobuf:"bytes,4,opt,name=epochStartTime,proto3" json:"epochStartTime,omitempty"`
	RewardAmount     string `protobuf:"bytes,5,opt,name=rewardAmount,proto3" json:"rewardAmount,omitempty"`
}

func (m *ValidatorPayoutHistory) Reset()         { *m = ValidatorPayoutHistory{} }
func (m *ValidatorPayoutHistory) String() string { return proto.CompactTextString(m) }
func (*ValidatorPayoutHistory) ProtoMessage()    {}
func (*ValidatorPayoutHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_45af6150ff54cc1a, []int{0}
}
func (m *ValidatorPayoutHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPayoutHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPayoutHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPayoutHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPayoutHistory.Merge(m, src)
}
func (m *ValidatorPayoutHistory) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPayoutHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPayoutHistory.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPayoutHistory proto.InternalMessageInfo

func (m *ValidatorPayoutHistory) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *ValidatorPayoutHistory) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func (m *ValidatorPayoutHistory) GetEpochNumber() int32 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *ValidatorPayoutHistory) GetEpochStartTime() string {
	if m != nil {
		return m.EpochStartTime
	}
	return ""
}

func (m *ValidatorPayoutHistory) GetRewardAmount() string {
	if m != nil {
		return m.RewardAmount
	}
	return ""
}

func init() {
	proto.RegisterType((*ValidatorPayoutHistory)(nil), "ssc.billing.ValidatorPayoutHistory")
}

func init() {
	proto.RegisterFile("ssc/billing/validator_payout_history.proto", fileDescriptor_45af6150ff54cc1a)
}

var fileDescriptor_45af6150ff54cc1a = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0xd0, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0xc6, 0xf1, 0x1a, 0x28, 0x12, 0x2e, 0x02, 0xe4, 0x01, 0x79, 0xb2, 0xa2, 0x0e, 0x55, 0xd4,
	0x21, 0x19, 0xb8, 0x00, 0x65, 0x82, 0x05, 0xa1, 0x82, 0x18, 0x58, 0x2a, 0x27, 0x36, 0x89, 0xa5,
	0x24, 0x8e, 0xfc, 0x5e, 0xa0, 0xe1, 0x14, 0x1c, 0x8b, 0xb1, 0x23, 0x03, 0x03, 0x4a, 0x2e, 0x82,
	0x30, 0x50, 0x41, 0x19, 0xdf, 0x5f, 0x3f, 0xbd, 0xe1, 0xa3, 0x53, 0x80, 0x34, 0x4e, 0x4c, 0x51,
	0x98, 0x2a, 0x8b, 0x1f, 0x64, 0x61, 0x94, 0x44, 0xeb, 0x16, 0xb5, 0x6c, 0x6d, 0x83, 0x8b, 0xdc,
	0x00, 0x5a, 0xd7, 0x46, 0xb5, 0xb3, 0x68, 0xd9, 0x08, 0x20, 0x8d, 0xbe, 0xed, 0xf8, 0x8d, 0xd0,
	0xe3, 0xdb, 0x1f, 0x7f, 0xe5, 0xf9, 0xf9, 0x97, 0x66, 0x53, 0x7a, 0xb4, 0xfe, 0x34, 0x53, 0xca,
	0x69, 0x00, 0x4e, 0x02, 0x12, 0xee, 0xcd, 0xff, 0x75, 0x16, 0xd2, 0x43, 0x5d, 0xdb, 0x34, 0xbf,
	0x50, 0xba, 0x42, 0x73, 0x6f, 0xb4, 0xe3, 0x5b, 0x9e, 0x6e, 0x66, 0x16, 0xd0, 0x91, 0x4f, 0x97,
	0x4d, 0x99, 0x68, 0xc7, 0xb7, 0x03, 0x12, 0x0e, 0xe7, 0xbf, 0x13, 0x9b, 0xd0, 0x03, 0x7f, 0x5e,
	0xa3, 0x74, 0x78, 0x63, 0x4a, 0xcd, 0x77, 0xfc, 0xab, 0x8d, 0xca, 0xc6, 0x74, 0xdf, 0xe9, 0x47,
	0xe9, 0xd4, 0xac, 0xb4, 0x4d, 0x85, 0x7c, 0xe8, 0xd5, 0x9f, 0x76, 0x76, 0xfa, 0xd2, 0x09, 0xb2,
	0xea, 0x04, 0x79, 0xef, 0x04, 0x79, 0xee, 0xc5, 0x60, 0xd5, 0x8b, 0xc1, 0x6b, 0x2f, 0x06, 0x77,
	0x93, 0xcc, 0x60, 0xde, 0x24, 0x51, 0x6a, 0xcb, 0x18, 0x64, 0x26, 0x97, 0xed, 0x53, 0xfc, 0x39,
	0xe2, 0x72, 0x3d, 0x23, 0xb6, 0xb5, 0x86, 0x64, 0xd7, 0x8f, 0x76, 0xf2, 0x11, 0x00, 0x00, 0xff,
	0xff, 0x88, 0x67, 0x5c, 0xf6, 0x62, 0x01, 0x00, 0x00,
}

func (m *ValidatorPayoutHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPayoutHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPayoutHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardAmount) > 0 {
		i -= len(m.RewardAmount)
		copy(dAtA[i:], m.RewardAmount)
		i = encodeVarintValidatorPayoutHistory(dAtA, i, uint64(len(m.RewardAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.EpochStartTime) > 0 {
		i -= len(m.EpochStartTime)
		copy(dAtA[i:], m.EpochStartTime)
		i = encodeVarintValidatorPayoutHistory(dAtA, i, uint64(len(m.EpochStartTime)))
		i--
		dAtA[i] = 0x22
	}
	if m.EpochNumber != 0 {
		i = encodeVarintValidatorPayoutHistory(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x18
	}
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintValidatorPayoutHistory(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintValidatorPayoutHistory(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidatorPayoutHistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidatorPayoutHistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorPayoutHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovValidatorPayoutHistory(uint64(l))
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovValidatorPayoutHistory(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovValidatorPayoutHistory(uint64(m.EpochNumber))
	}
	l = len(m.EpochStartTime)
	if l > 0 {
		n += 1 + l + sovValidatorPayoutHistory(uint64(l))
	}
	l = len(m.RewardAmount)
	if l > 0 {
		n += 1 + l + sovValidatorPayoutHistory(uint64(l))
	}
	return n
}

func sovValidatorPayoutHistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidatorPayoutHistory(x uint64) (n int) {
	return sovValidatorPayoutHistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorPayoutHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorPayoutHistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPayoutHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPayoutHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorPayoutHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorPayoutHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorPayoutHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorPayoutHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochStartTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorPayoutHistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAmount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorPayoutHistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidatorPayoutHistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidatorPayoutHistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidatorPayoutHistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorPayoutHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorPayoutHistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidatorPayoutHistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidatorPayoutHistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidatorPayoutHistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidatorPayoutHistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidatorPayoutHistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidatorPayoutHistory = fmt.Errorf("proto: unexpected end of group")
)
