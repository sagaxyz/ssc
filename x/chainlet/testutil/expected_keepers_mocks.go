// Code generated by MockGen. DO NOT EDIT.
// Source: x/chainlet/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	types0 "github.com/cosmos/cosmos-sdk/x/auth/types"
	types1 "github.com/cosmos/interchain-security/v4/x/ccv/provider/types"
	types2 "github.com/cosmos/interchain-security/v4/x/ccv/types"
	gomock "github.com/golang/mock/gomock"
	types3 "github.com/sagaxyz/saga-sdk/x/acl/types"
	types4 "github.com/sagaxyz/ssc/x/chainlet/types"
)

// MockAccountKeeper is a mock of AccountKeeper interface.
type MockAccountKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockAccountKeeperMockRecorder
}

// MockAccountKeeperMockRecorder is the mock recorder for MockAccountKeeper.
type MockAccountKeeperMockRecorder struct {
	mock *MockAccountKeeper
}

// NewMockAccountKeeper creates a new mock instance.
func NewMockAccountKeeper(ctrl *gomock.Controller) *MockAccountKeeper {
	mock := &MockAccountKeeper{ctrl: ctrl}
	mock.recorder = &MockAccountKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountKeeper) EXPECT() *MockAccountKeeperMockRecorder {
	return m.recorder
}

// GetAccount mocks base method.
func (m *MockAccountKeeper) GetAccount(ctx types.Context, addr types.AccAddress) types0.AccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, addr)
	ret0, _ := ret[0].(types0.AccountI)
	return ret0
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockAccountKeeperMockRecorder) GetAccount(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetAccount), ctx, addr)
}

// GetModuleAccount mocks base method.
func (m *MockAccountKeeper) GetModuleAccount(ctx types.Context, moduleName string) types0.ModuleAccountI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModuleAccount", ctx, moduleName)
	ret0, _ := ret[0].(types0.ModuleAccountI)
	return ret0
}

// GetModuleAccount indicates an expected call of GetModuleAccount.
func (mr *MockAccountKeeperMockRecorder) GetModuleAccount(ctx, moduleName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModuleAccount", reflect.TypeOf((*MockAccountKeeper)(nil).GetModuleAccount), ctx, moduleName)
}

// MockBankKeeper is a mock of BankKeeper interface.
type MockBankKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBankKeeperMockRecorder
}

// MockBankKeeperMockRecorder is the mock recorder for MockBankKeeper.
type MockBankKeeperMockRecorder struct {
	mock *MockBankKeeper
}

// NewMockBankKeeper creates a new mock instance.
func NewMockBankKeeper(ctrl *gomock.Controller) *MockBankKeeper {
	mock := &MockBankKeeper{ctrl: ctrl}
	mock.recorder = &MockBankKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBankKeeper) EXPECT() *MockBankKeeperMockRecorder {
	return m.recorder
}

// MockProviderKeeper is a mock of ProviderKeeper interface.
type MockProviderKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockProviderKeeperMockRecorder
}

// MockProviderKeeperMockRecorder is the mock recorder for MockProviderKeeper.
type MockProviderKeeperMockRecorder struct {
	mock *MockProviderKeeper
}

// NewMockProviderKeeper creates a new mock instance.
func NewMockProviderKeeper(ctrl *gomock.Controller) *MockProviderKeeper {
	mock := &MockProviderKeeper{ctrl: ctrl}
	mock.recorder = &MockProviderKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderKeeper) EXPECT() *MockProviderKeeperMockRecorder {
	return m.recorder
}

// AppendPendingVSCPackets mocks base method.
func (m *MockProviderKeeper) AppendPendingVSCPackets(ctx types.Context, chainID string, newPackets ...types2.ValidatorSetChangePacketData) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, chainID}
	for _, a := range newPackets {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "AppendPendingVSCPackets", varargs...)
}

// AppendPendingVSCPackets indicates an expected call of AppendPendingVSCPackets.
func (mr *MockProviderKeeperMockRecorder) AppendPendingVSCPackets(ctx, chainID interface{}, newPackets ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, chainID}, newPackets...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendPendingVSCPackets", reflect.TypeOf((*MockProviderKeeper)(nil).AppendPendingVSCPackets), varargs...)
}

// GetChainToChannel mocks base method.
func (m *MockProviderKeeper) GetChainToChannel(ctx types.Context, chainID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainToChannel", ctx, chainID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetChainToChannel indicates an expected call of GetChainToChannel.
func (mr *MockProviderKeeperMockRecorder) GetChainToChannel(ctx, chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainToChannel", reflect.TypeOf((*MockProviderKeeper)(nil).GetChainToChannel), ctx, chainID)
}

// GetConsumerClientId mocks base method.
func (m *MockProviderKeeper) GetConsumerClientId(ctx types.Context, chainID string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerClientId", ctx, chainID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetConsumerClientId indicates an expected call of GetConsumerClientId.
func (mr *MockProviderKeeperMockRecorder) GetConsumerClientId(ctx, chainID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerClientId", reflect.TypeOf((*MockProviderKeeper)(nil).GetConsumerClientId), ctx, chainID)
}

// GetValidatorSetUpdateId mocks base method.
func (m *MockProviderKeeper) GetValidatorSetUpdateId(ctx types.Context) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSetUpdateId", ctx)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetValidatorSetUpdateId indicates an expected call of GetValidatorSetUpdateId.
func (mr *MockProviderKeeperMockRecorder) GetValidatorSetUpdateId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSetUpdateId", reflect.TypeOf((*MockProviderKeeper)(nil).GetValidatorSetUpdateId), ctx)
}

// HandleConsumerAdditionProposal mocks base method.
func (m *MockProviderKeeper) HandleConsumerAdditionProposal(ctx types.Context, prop *types1.ConsumerAdditionProposal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleConsumerAdditionProposal", ctx, prop)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleConsumerAdditionProposal indicates an expected call of HandleConsumerAdditionProposal.
func (mr *MockProviderKeeperMockRecorder) HandleConsumerAdditionProposal(ctx, prop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleConsumerAdditionProposal", reflect.TypeOf((*MockProviderKeeper)(nil).HandleConsumerAdditionProposal), ctx, prop)
}

// IncrementValidatorSetUpdateId mocks base method.
func (m *MockProviderKeeper) IncrementValidatorSetUpdateId(ctx types.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementValidatorSetUpdateId", ctx)
}

// IncrementValidatorSetUpdateId indicates an expected call of IncrementValidatorSetUpdateId.
func (mr *MockProviderKeeperMockRecorder) IncrementValidatorSetUpdateId(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementValidatorSetUpdateId", reflect.TypeOf((*MockProviderKeeper)(nil).IncrementValidatorSetUpdateId), ctx)
}

// SendVSCPacketsToChain mocks base method.
func (m *MockProviderKeeper) SendVSCPacketsToChain(ctx types.Context, chainID, channelID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendVSCPacketsToChain", ctx, chainID, channelID)
}

// SendVSCPacketsToChain indicates an expected call of SendVSCPacketsToChain.
func (mr *MockProviderKeeperMockRecorder) SendVSCPacketsToChain(ctx, chainID, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendVSCPacketsToChain", reflect.TypeOf((*MockProviderKeeper)(nil).SendVSCPacketsToChain), ctx, chainID, channelID)
}

// MockBillingKeeper is a mock of BillingKeeper interface.
type MockBillingKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockBillingKeeperMockRecorder
}

// MockBillingKeeperMockRecorder is the mock recorder for MockBillingKeeper.
type MockBillingKeeperMockRecorder struct {
	mock *MockBillingKeeper
}

// NewMockBillingKeeper creates a new mock instance.
func NewMockBillingKeeper(ctrl *gomock.Controller) *MockBillingKeeper {
	mock := &MockBillingKeeper{ctrl: ctrl}
	mock.recorder = &MockBillingKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBillingKeeper) EXPECT() *MockBillingKeeperMockRecorder {
	return m.recorder
}

// BillAccount mocks base method.
func (m *MockBillingKeeper) BillAccount(ctx types.Context, amount types.Coin, chainlet types4.Chainlet, epochIdentifier, memo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BillAccount", ctx, amount, chainlet, epochIdentifier, memo)
	ret0, _ := ret[0].(error)
	return ret0
}

// BillAccount indicates an expected call of BillAccount.
func (mr *MockBillingKeeperMockRecorder) BillAccount(ctx, amount, chainlet, epochIdentifier, memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BillAccount", reflect.TypeOf((*MockBillingKeeper)(nil).BillAccount), ctx, amount, chainlet, epochIdentifier, memo)
}

// PayEpochFeeToValidator mocks base method.
func (m *MockBillingKeeper) PayEpochFeeToValidator(ctx types.Context, epochFee types.Coins, fromModuleName string, valAddr types.AccAddress, memo string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayEpochFeeToValidator", ctx, epochFee, fromModuleName, valAddr, memo)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayEpochFeeToValidator indicates an expected call of PayEpochFeeToValidator.
func (mr *MockBillingKeeperMockRecorder) PayEpochFeeToValidator(ctx, epochFee, fromModuleName, valAddr, memo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayEpochFeeToValidator", reflect.TypeOf((*MockBillingKeeper)(nil).PayEpochFeeToValidator), ctx, epochFee, fromModuleName, valAddr, memo)
}

// MockEscrowKeeper is a mock of EscrowKeeper interface.
type MockEscrowKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockEscrowKeeperMockRecorder
}

// MockEscrowKeeperMockRecorder is the mock recorder for MockEscrowKeeper.
type MockEscrowKeeperMockRecorder struct {
	mock *MockEscrowKeeper
}

// NewMockEscrowKeeper creates a new mock instance.
func NewMockEscrowKeeper(ctrl *gomock.Controller) *MockEscrowKeeper {
	mock := &MockEscrowKeeper{ctrl: ctrl}
	mock.recorder = &MockEscrowKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEscrowKeeper) EXPECT() *MockEscrowKeeperMockRecorder {
	return m.recorder
}

// NewChainletAccount mocks base method.
func (m *MockEscrowKeeper) NewChainletAccount(ctx types.Context, address types.AccAddress, chainId string, depositAmount types.Coin) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChainletAccount", ctx, address, chainId, depositAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewChainletAccount indicates an expected call of NewChainletAccount.
func (mr *MockEscrowKeeperMockRecorder) NewChainletAccount(ctx, address, chainId, depositAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChainletAccount", reflect.TypeOf((*MockEscrowKeeper)(nil).NewChainletAccount), ctx, address, chainId, depositAmount)
}

// MockDacKeeper is a mock of DacKeeper interface.
type MockDacKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockDacKeeperMockRecorder
}

// MockDacKeeperMockRecorder is the mock recorder for MockDacKeeper.
type MockDacKeeperMockRecorder struct {
	mock *MockDacKeeper
}

// NewMockDacKeeper creates a new mock instance.
func NewMockDacKeeper(ctrl *gomock.Controller) *MockDacKeeper {
	mock := &MockDacKeeper{ctrl: ctrl}
	mock.recorder = &MockDacKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDacKeeper) EXPECT() *MockDacKeeperMockRecorder {
	return m.recorder
}

// Allowed mocks base method.
func (m *MockDacKeeper) Allowed(ctx types.Context, addr *types3.Address) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allowed", ctx, addr)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Allowed indicates an expected call of Allowed.
func (mr *MockDacKeeperMockRecorder) Allowed(ctx, addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowed", reflect.TypeOf((*MockDacKeeper)(nil).Allowed), ctx, addr)
}
