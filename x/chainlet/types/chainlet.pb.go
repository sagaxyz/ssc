// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/chainlet/chainlet.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_STATUS_OFFLINE Status = 0
	Status_STATUS_ONLINE  Status = 1
)

var Status_name = map[int32]string{
	0: "STATUS_OFFLINE",
	1: "STATUS_ONLINE",
}

var Status_value = map[string]int32{
	"STATUS_OFFLINE": 0,
	"STATUS_ONLINE":  1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f08c7224137a3f4b, []int{0}
}

type Chainlet struct {
	SpawnTime            time.Time      `protobuf:"bytes,1,opt,name=spawnTime,proto3,stdtime" json:"spawnTime"`
	Launcher             string         `protobuf:"bytes,2,opt,name=launcher,proto3" json:"launcher,omitempty"`
	Maintainers          []string       `protobuf:"bytes,3,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	ChainletStackName    string         `protobuf:"bytes,4,opt,name=chainletStackName,proto3" json:"chainletStackName,omitempty"`
	ChainletStackVersion string         `protobuf:"bytes,5,opt,name=chainletStackVersion,proto3" json:"chainletStackVersion,omitempty"`
	ChainId              string         `protobuf:"bytes,6,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ChainletName         string         `protobuf:"bytes,7,opt,name=chainletName,proto3" json:"chainletName,omitempty"`
	Params               ChainletParams `protobuf:"bytes,8,opt,name=params,proto3" json:"params"`
	Status               Status         `protobuf:"varint,9,opt,name=status,proto3,enum=ssc.chainlet.Status" json:"status,omitempty"`
	AutoUpgradeStack     bool           `protobuf:"varint,10,opt,name=autoUpgradeStack,proto3" json:"autoUpgradeStack,omitempty"`
	GenesisValidators    []string       `protobuf:"bytes,11,rep,name=genesisValidators,proto3" json:"genesisValidators,omitempty"`
	Tags                 []string       `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	IsServiceChainlet    bool           `protobuf:"varint,13,opt,name=isServiceChainlet,proto3" json:"isServiceChainlet,omitempty"`
	IsCCVConsumer        bool           `protobuf:"varint,14,opt,name=isCCVConsumer,proto3" json:"isCCVConsumer,omitempty"`
}

func (m *Chainlet) Reset()         { *m = Chainlet{} }
func (m *Chainlet) String() string { return proto.CompactTextString(m) }
func (*Chainlet) ProtoMessage()    {}
func (*Chainlet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f08c7224137a3f4b, []int{0}
}
func (m *Chainlet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chainlet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chainlet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chainlet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chainlet.Merge(m, src)
}
func (m *Chainlet) XXX_Size() int {
	return m.Size()
}
func (m *Chainlet) XXX_DiscardUnknown() {
	xxx_messageInfo_Chainlet.DiscardUnknown(m)
}

var xxx_messageInfo_Chainlet proto.InternalMessageInfo

func (m *Chainlet) GetSpawnTime() time.Time {
	if m != nil {
		return m.SpawnTime
	}
	return time.Time{}
}

func (m *Chainlet) GetLauncher() string {
	if m != nil {
		return m.Launcher
	}
	return ""
}

func (m *Chainlet) GetMaintainers() []string {
	if m != nil {
		return m.Maintainers
	}
	return nil
}

func (m *Chainlet) GetChainletStackName() string {
	if m != nil {
		return m.ChainletStackName
	}
	return ""
}

func (m *Chainlet) GetChainletStackVersion() string {
	if m != nil {
		return m.ChainletStackVersion
	}
	return ""
}

func (m *Chainlet) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Chainlet) GetChainletName() string {
	if m != nil {
		return m.ChainletName
	}
	return ""
}

func (m *Chainlet) GetParams() ChainletParams {
	if m != nil {
		return m.Params
	}
	return ChainletParams{}
}

func (m *Chainlet) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_OFFLINE
}

func (m *Chainlet) GetAutoUpgradeStack() bool {
	if m != nil {
		return m.AutoUpgradeStack
	}
	return false
}

func (m *Chainlet) GetGenesisValidators() []string {
	if m != nil {
		return m.GenesisValidators
	}
	return nil
}

func (m *Chainlet) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Chainlet) GetIsServiceChainlet() bool {
	if m != nil {
		return m.IsServiceChainlet
	}
	return false
}

func (m *Chainlet) GetIsCCVConsumer() bool {
	if m != nil {
		return m.IsCCVConsumer
	}
	return false
}

func init() {
	proto.RegisterEnum("ssc.chainlet.Status", Status_name, Status_value)
	proto.RegisterType((*Chainlet)(nil), "ssc.chainlet.Chainlet")
}

func init() { proto.RegisterFile("ssc/chainlet/chainlet.proto", fileDescriptor_f08c7224137a3f4b) }

var fileDescriptor_f08c7224137a3f4b = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0xf5, 0x36, 0xae, 0x22, 0xaf, 0x3f, 0x48, 0x16, 0x1f, 0x16, 0xb7, 0xc8, 0xc2, 0x14, 0x2a,
	0x42, 0x90, 0xc0, 0xbd, 0xf5, 0x16, 0x9b, 0x06, 0x02, 0xc5, 0x2d, 0x92, 0xe3, 0x43, 0x2f, 0x61,
	0x2d, 0x6f, 0xe5, 0xa5, 0x96, 0x56, 0x68, 0x56, 0x6d, 0xd2, 0x5f, 0x91, 0x9f, 0x95, 0x63, 0x8e,
	0x39, 0xb5, 0xc5, 0xfe, 0x23, 0x45, 0x2b, 0x2b, 0x89, 0x71, 0x6e, 0x33, 0xef, 0xbd, 0xd9, 0xa7,
	0x79, 0x1a, 0xfc, 0x06, 0x20, 0xf4, 0xc2, 0x25, 0x13, 0xc9, 0x8a, 0xab, 0xc7, 0xc2, 0x4d, 0x33,
	0xa9, 0x24, 0x69, 0x01, 0x84, 0x6e, 0x85, 0xf5, 0xba, 0x91, 0x8c, 0xa4, 0x26, 0xbc, 0xa2, 0x2a,
	0x35, 0xbd, 0x7e, 0x24, 0x65, 0xb4, 0xe2, 0x9e, 0xee, 0xe6, 0xf9, 0x77, 0x4f, 0x89, 0x98, 0x83,
	0x62, 0x71, 0xba, 0x15, 0x0c, 0x5e, 0x74, 0xb8, 0x4a, 0x59, 0xc6, 0x62, 0x28, 0x35, 0x83, 0x87,
	0x3a, 0x36, 0xc7, 0x5b, 0x86, 0x8c, 0x70, 0x03, 0x52, 0xf6, 0x2b, 0x99, 0x8a, 0x98, 0x53, 0x64,
	0x23, 0xa7, 0x39, 0xec, 0xb9, 0xa5, 0x8b, 0x5b, 0xb9, 0xb8, 0xd3, 0xca, 0x65, 0x64, 0xde, 0xfd,
	0xe9, 0xd7, 0x6e, 0xff, 0xf6, 0x91, 0xff, 0x34, 0x46, 0x7a, 0xd8, 0x5c, 0xb1, 0x3c, 0x09, 0x97,
	0x3c, 0xa3, 0xaf, 0x6c, 0xe4, 0x34, 0xfc, 0xc7, 0x9e, 0xd8, 0xb8, 0x19, 0x33, 0x91, 0x28, 0x26,
	0x12, 0x9e, 0x01, 0x3d, 0xb0, 0x0f, 0x9c, 0x86, 0xff, 0x1c, 0x22, 0xa7, 0xf8, 0xb8, 0xfa, 0xce,
	0x40, 0xb1, 0xf0, 0xc7, 0x84, 0xc5, 0x9c, 0xd6, 0xf5, 0x33, 0xfb, 0x04, 0x19, 0xe2, 0xee, 0x0e,
	0x38, 0xe3, 0x19, 0x08, 0x99, 0xd0, 0xd7, 0x7a, 0xe0, 0x45, 0x8e, 0x50, 0x7c, 0xa8, 0xf1, 0x8b,
	0x05, 0x35, 0xb4, 0xac, 0x6a, 0xc9, 0x00, 0xb7, 0xaa, 0x09, 0x6d, 0x7b, 0xa8, 0xe9, 0x1d, 0x8c,
	0x7c, 0xc4, 0x46, 0x19, 0x1f, 0x35, 0x75, 0x3c, 0x6f, 0xdd, 0xe7, 0x3f, 0xca, 0xad, 0x92, 0xfc,
	0xaa, 0x35, 0xa3, 0x7a, 0x11, 0x90, 0xbf, 0x9d, 0x20, 0xa7, 0xd8, 0x00, 0xc5, 0x54, 0x0e, 0xb4,
	0x61, 0x23, 0xa7, 0x33, 0xec, 0xee, 0xce, 0x06, 0x9a, 0xf3, 0xb7, 0x1a, 0x72, 0x82, 0x8f, 0x58,
	0xae, 0xe4, 0x65, 0x1a, 0x65, 0x6c, 0xc1, 0xf5, 0x0a, 0x14, 0xdb, 0xc8, 0x31, 0xfd, 0x3d, 0xbc,
	0x48, 0x2d, 0xe2, 0x09, 0x07, 0x01, 0x33, 0xb6, 0x12, 0x0b, 0xa6, 0x64, 0x06, 0xb4, 0xa9, 0xd3,
	0xdd, 0x27, 0x08, 0xc1, 0x75, 0xc5, 0x22, 0xa0, 0x2d, 0x2d, 0xd0, 0x75, 0xf1, 0x82, 0x80, 0x80,
	0x67, 0x3f, 0x45, 0xc8, 0xab, 0x25, 0x68, 0x5b, 0xdb, 0xed, 0x13, 0xe4, 0x1d, 0x6e, 0x0b, 0x18,
	0x8f, 0x67, 0x63, 0x99, 0x40, 0x1e, 0xf3, 0x8c, 0x76, 0xb4, 0x72, 0x17, 0x3c, 0xf1, 0xb0, 0x51,
	0xee, 0x44, 0x08, 0xee, 0x04, 0xd3, 0xb3, 0xe9, 0x65, 0x70, 0xf5, 0xe5, 0xfc, 0xfc, 0xf3, 0xc5,
	0xe4, 0xd3, 0x51, 0x8d, 0x1c, 0xe3, 0x76, 0x85, 0x4d, 0x34, 0x84, 0x46, 0x67, 0x77, 0x6b, 0x0b,
	0xdd, 0xaf, 0x2d, 0xf4, 0x6f, 0x6d, 0xa1, 0xdb, 0x8d, 0x55, 0xbb, 0xdf, 0x58, 0xb5, 0x87, 0x8d,
	0x55, 0xfb, 0xf6, 0x3e, 0x12, 0x6a, 0x99, 0xcf, 0xdd, 0x50, 0xc6, 0x1e, 0xb0, 0x88, 0x5d, 0xdf,
	0xfc, 0xf6, 0x8a, 0xe3, 0xbe, 0x7e, 0x3a, 0x6f, 0x75, 0x93, 0x72, 0x98, 0x1b, 0xfa, 0x4c, 0x3f,
	0xfc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xea, 0x64, 0xff, 0xd2, 0x5d, 0x03, 0x00, 0x00,
}

func (m *Chainlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chainlet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chainlet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsCCVConsumer {
		i--
		if m.IsCCVConsumer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.IsServiceChainlet {
		i--
		if m.IsServiceChainlet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintChainlet(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.GenesisValidators) > 0 {
		for iNdEx := len(m.GenesisValidators) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GenesisValidators[iNdEx])
			copy(dAtA[i:], m.GenesisValidators[iNdEx])
			i = encodeVarintChainlet(dAtA, i, uint64(len(m.GenesisValidators[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.AutoUpgradeStack {
		i--
		if m.AutoUpgradeStack {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Status != 0 {
		i = encodeVarintChainlet(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChainlet(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.ChainletName) > 0 {
		i -= len(m.ChainletName)
		copy(dAtA[i:], m.ChainletName)
		i = encodeVarintChainlet(dAtA, i, uint64(len(m.ChainletName)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintChainlet(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChainletStackVersion) > 0 {
		i -= len(m.ChainletStackVersion)
		copy(dAtA[i:], m.ChainletStackVersion)
		i = encodeVarintChainlet(dAtA, i, uint64(len(m.ChainletStackVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChainletStackName) > 0 {
		i -= len(m.ChainletStackName)
		copy(dAtA[i:], m.ChainletStackName)
		i = encodeVarintChainlet(dAtA, i, uint64(len(m.ChainletStackName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Maintainers) > 0 {
		for iNdEx := len(m.Maintainers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Maintainers[iNdEx])
			copy(dAtA[i:], m.Maintainers[iNdEx])
			i = encodeVarintChainlet(dAtA, i, uint64(len(m.Maintainers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Launcher) > 0 {
		i -= len(m.Launcher)
		copy(dAtA[i:], m.Launcher)
		i = encodeVarintChainlet(dAtA, i, uint64(len(m.Launcher)))
		i--
		dAtA[i] = 0x12
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.SpawnTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SpawnTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintChainlet(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintChainlet(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainlet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chainlet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.SpawnTime)
	n += 1 + l + sovChainlet(uint64(l))
	l = len(m.Launcher)
	if l > 0 {
		n += 1 + l + sovChainlet(uint64(l))
	}
	if len(m.Maintainers) > 0 {
		for _, s := range m.Maintainers {
			l = len(s)
			n += 1 + l + sovChainlet(uint64(l))
		}
	}
	l = len(m.ChainletStackName)
	if l > 0 {
		n += 1 + l + sovChainlet(uint64(l))
	}
	l = len(m.ChainletStackVersion)
	if l > 0 {
		n += 1 + l + sovChainlet(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovChainlet(uint64(l))
	}
	l = len(m.ChainletName)
	if l > 0 {
		n += 1 + l + sovChainlet(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovChainlet(uint64(l))
	if m.Status != 0 {
		n += 1 + sovChainlet(uint64(m.Status))
	}
	if m.AutoUpgradeStack {
		n += 2
	}
	if len(m.GenesisValidators) > 0 {
		for _, s := range m.GenesisValidators {
			l = len(s)
			n += 1 + l + sovChainlet(uint64(l))
		}
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovChainlet(uint64(l))
		}
	}
	if m.IsServiceChainlet {
		n += 2
	}
	if m.IsCCVConsumer {
		n += 2
	}
	return n
}

func sovChainlet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainlet(x uint64) (n int) {
	return sovChainlet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chainlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainlet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chainlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chainlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpawnTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.SpawnTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Launcher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Launcher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maintainers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maintainers = append(m.Maintainers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletStackName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletStackName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletStackVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletStackVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoUpgradeStack", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AutoUpgradeStack = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisValidators", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisValidators = append(m.GenesisValidators, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainlet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainlet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsServiceChainlet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsServiceChainlet = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCCVConsumer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCCVConsumer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChainlet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainlet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainlet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainlet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainlet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainlet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainlet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainlet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainlet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainlet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainlet = fmt.Errorf("proto: unexpected end of group")
)
