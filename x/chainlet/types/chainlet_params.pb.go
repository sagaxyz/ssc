// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/chainlet/chainlet_params.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainletParams struct {
	GasLimit uint64 `protobuf:"varint,1,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
	// Config.toml params - can be set and modified via a chainlet update
	CreateEmptyBlocks bool `protobuf:"varint,2,opt,name=createEmptyBlocks,proto3" json:"createEmptyBlocks,omitempty"`
	DacEnable         bool `protobuf:"varint,3,opt,name=dacEnable,proto3" json:"dacEnable,omitempty"`
	// Adding genesis account balance support
	GenAcctBalances GenesisAccountBalances `protobuf:"bytes,4,opt,name=genAcctBalances,proto3" json:"genAcctBalances"`
	// Constant EIP-1559 base fee
	FixedBaseFee string `protobuf:"bytes,5,opt,name=fixedBaseFee,proto3" json:"fixedBaseFee,omitempty"`
	FeeAccount   string `protobuf:"bytes,6,opt,name=feeAccount,proto3" json:"feeAccount,omitempty"`
	EvmDisable   bool   `protobuf:"varint,7,opt,name=evmDisable,proto3" json:"evmDisable,omitempty"`
}

func (m *ChainletParams) Reset()         { *m = ChainletParams{} }
func (m *ChainletParams) String() string { return proto.CompactTextString(m) }
func (*ChainletParams) ProtoMessage()    {}
func (*ChainletParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_335dcc096f99ee7a, []int{0}
}
func (m *ChainletParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainletParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainletParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainletParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainletParams.Merge(m, src)
}
func (m *ChainletParams) XXX_Size() int {
	return m.Size()
}
func (m *ChainletParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainletParams.DiscardUnknown(m)
}

var xxx_messageInfo_ChainletParams proto.InternalMessageInfo

func (m *ChainletParams) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

func (m *ChainletParams) GetCreateEmptyBlocks() bool {
	if m != nil {
		return m.CreateEmptyBlocks
	}
	return false
}

func (m *ChainletParams) GetDacEnable() bool {
	if m != nil {
		return m.DacEnable
	}
	return false
}

func (m *ChainletParams) GetGenAcctBalances() GenesisAccountBalances {
	if m != nil {
		return m.GenAcctBalances
	}
	return GenesisAccountBalances{}
}

func (m *ChainletParams) GetFixedBaseFee() string {
	if m != nil {
		return m.FixedBaseFee
	}
	return ""
}

func (m *ChainletParams) GetFeeAccount() string {
	if m != nil {
		return m.FeeAccount
	}
	return ""
}

func (m *ChainletParams) GetEvmDisable() bool {
	if m != nil {
		return m.EvmDisable
	}
	return false
}

func init() {
	proto.RegisterType((*ChainletParams)(nil), "ssc.chainlet.ChainletParams")
}

func init() {
	proto.RegisterFile("ssc/chainlet/chainlet_params.proto", fileDescriptor_335dcc096f99ee7a)
}

var fileDescriptor_335dcc096f99ee7a = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xcd, 0x4e, 0xf2, 0x40,
	0x14, 0xed, 0xf0, 0xf1, 0x21, 0x8c, 0x44, 0x63, 0xe3, 0xa2, 0x21, 0x66, 0x6c, 0x88, 0x89, 0x4d,
	0x34, 0x6d, 0xa2, 0x4f, 0x40, 0x15, 0xdd, 0xb8, 0x30, 0x8d, 0x2b, 0x37, 0x64, 0x3a, 0x5c, 0x86,
	0x89, 0x6d, 0xa7, 0x61, 0x06, 0x03, 0x3e, 0x85, 0xcf, 0xe2, 0x53, 0xb0, 0x64, 0xe9, 0xca, 0x18,
	0x78, 0x11, 0xc3, 0x50, 0xfe, 0x74, 0x77, 0xe7, 0x9c, 0x93, 0x33, 0xe7, 0xdc, 0x8b, 0x9b, 0x4a,
	0xb1, 0x80, 0xf5, 0xa9, 0xc8, 0x12, 0xd0, 0xeb, 0xa1, 0x93, 0xd3, 0x01, 0x4d, 0x95, 0x9f, 0x0f,
	0xa4, 0x96, 0x76, 0x5d, 0x29, 0xe6, 0xaf, 0xa8, 0xc6, 0x31, 0x97, 0x5c, 0x1a, 0x22, 0x58, 0x4c,
	0x4b, 0x4d, 0xe3, 0x62, 0xc7, 0x87, 0x43, 0x06, 0x4a, 0xa8, 0x0e, 0x65, 0x4c, 0x0e, 0x33, 0xdd,
	0x89, 0x69, 0x42, 0x33, 0x06, 0x85, 0x61, 0xf3, 0xa3, 0x84, 0x0f, 0x6e, 0x0a, 0xed, 0xa3, 0xf9,
	0xc9, 0x6e, 0xe0, 0x2a, 0xa7, 0xea, 0x41, 0xa4, 0x42, 0x3b, 0xc8, 0x45, 0x5e, 0x39, 0x5a, 0xbf,
	0xed, 0x4b, 0x7c, 0xc4, 0x06, 0x40, 0x35, 0xb4, 0xd3, 0x5c, 0x8f, 0xc3, 0x44, 0xb2, 0x17, 0xe5,
	0x94, 0x5c, 0xe4, 0x55, 0xa3, 0xbf, 0x84, 0x7d, 0x82, 0x6b, 0x5d, 0xca, 0xda, 0x19, 0x8d, 0x13,
	0x70, 0xfe, 0x19, 0xd5, 0x06, 0xb0, 0x9f, 0xf0, 0x21, 0x87, 0xac, 0xc5, 0x98, 0x0e, 0x8b, 0x4c,
	0x4e, 0xd9, 0x45, 0xde, 0xfe, 0xd5, 0x99, 0xbf, 0xdd, 0xd2, 0xbf, 0x5f, 0x36, 0x68, 0x2d, 0x0b,
	0xac, 0xb4, 0x61, 0x79, 0xf2, 0x75, 0x6a, 0x45, 0xbf, 0x2d, 0xec, 0x26, 0xae, 0xf7, 0xc4, 0x08,
	0xba, 0x21, 0x55, 0x70, 0x07, 0xe0, 0xfc, 0x77, 0x91, 0x57, 0x8b, 0x76, 0x30, 0x9b, 0x60, 0xdc,
	0x03, 0x28, 0x0c, 0x9d, 0x8a, 0x51, 0x6c, 0x21, 0x0b, 0x1e, 0x5e, 0xd3, 0x5b, 0xa1, 0x4c, 0xf0,
	0x3d, 0x13, 0x7c, 0x0b, 0x09, 0x5b, 0x93, 0x19, 0x41, 0xd3, 0x19, 0x41, 0xdf, 0x33, 0x82, 0xde,
	0xe7, 0xc4, 0x9a, 0xce, 0x89, 0xf5, 0x39, 0x27, 0xd6, 0xf3, 0x39, 0x17, 0xba, 0x3f, 0x8c, 0x7d,
	0x26, 0xd3, 0x40, 0x51, 0x4e, 0x47, 0xe3, 0xb7, 0x60, 0x71, 0x8e, 0xd1, 0xe6, 0x20, 0x7a, 0x9c,
	0x83, 0x8a, 0x2b, 0x66, 0xfd, 0xd7, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xec, 0x2c, 0xaa,
	0xf5, 0x01, 0x00, 0x00,
}

func (m *ChainletParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainletParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EvmDisable {
		i--
		if m.EvmDisable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.FeeAccount) > 0 {
		i -= len(m.FeeAccount)
		copy(dAtA[i:], m.FeeAccount)
		i = encodeVarintChainletParams(dAtA, i, uint64(len(m.FeeAccount)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.FixedBaseFee) > 0 {
		i -= len(m.FixedBaseFee)
		copy(dAtA[i:], m.FixedBaseFee)
		i = encodeVarintChainletParams(dAtA, i, uint64(len(m.FixedBaseFee)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size, err := m.GenAcctBalances.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChainletParams(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.DacEnable {
		i--
		if m.DacEnable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.CreateEmptyBlocks {
		i--
		if m.CreateEmptyBlocks {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.GasLimit != 0 {
		i = encodeVarintChainletParams(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainletParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainletParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainletParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasLimit != 0 {
		n += 1 + sovChainletParams(uint64(m.GasLimit))
	}
	if m.CreateEmptyBlocks {
		n += 2
	}
	if m.DacEnable {
		n += 2
	}
	l = m.GenAcctBalances.Size()
	n += 1 + l + sovChainletParams(uint64(l))
	l = len(m.FixedBaseFee)
	if l > 0 {
		n += 1 + l + sovChainletParams(uint64(l))
	}
	l = len(m.FeeAccount)
	if l > 0 {
		n += 1 + l + sovChainletParams(uint64(l))
	}
	if m.EvmDisable {
		n += 2
	}
	return n
}

func sovChainletParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainletParams(x uint64) (n int) {
	return sovChainletParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainletParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainletParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainletParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainletParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateEmptyBlocks", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CreateEmptyBlocks = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DacEnable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DacEnable = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenAcctBalances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainletParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainletParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GenAcctBalances.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedBaseFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixedBaseFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmDisable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EvmDisable = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChainletParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainletParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainletParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainletParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainletParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainletParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainletParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainletParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainletParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainletParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainletParams = fmt.Errorf("proto: unexpected end of group")
)
