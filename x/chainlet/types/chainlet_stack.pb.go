// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/chainlet/chainlet_stack.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainletStack struct {
	Creator     string                `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DisplayName string                `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description string                `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Versions    []ChainletStackParams `protobuf:"bytes,4,rep,name=versions,proto3" json:"versions"`
	Fees        []ChainletStackFees   `protobuf:"bytes,5,rep,name=fees,proto3" json:"fees"`
}

func (m *ChainletStack) Reset()         { *m = ChainletStack{} }
func (m *ChainletStack) String() string { return proto.CompactTextString(m) }
func (*ChainletStack) ProtoMessage()    {}
func (*ChainletStack) Descriptor() ([]byte, []int) {
	return fileDescriptor_f413fb807a778764, []int{0}
}
func (m *ChainletStack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainletStack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainletStack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainletStack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainletStack.Merge(m, src)
}
func (m *ChainletStack) XXX_Size() int {
	return m.Size()
}
func (m *ChainletStack) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainletStack.DiscardUnknown(m)
}

var xxx_messageInfo_ChainletStack proto.InternalMessageInfo

func (m *ChainletStack) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *ChainletStack) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ChainletStack) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ChainletStack) GetVersions() []ChainletStackParams {
	if m != nil {
		return m.Versions
	}
	return nil
}

func (m *ChainletStack) GetFees() []ChainletStackFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

type ChainletStackFees struct {
	Denom    string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	EpochFee string `protobuf:"bytes,2,opt,name=epochFee,proto3" json:"epochFee,omitempty"`
	SetupFee string `protobuf:"bytes,3,opt,name=setupFee,proto3" json:"setupFee,omitempty"`
}

func (m *ChainletStackFees) Reset()         { *m = ChainletStackFees{} }
func (m *ChainletStackFees) String() string { return proto.CompactTextString(m) }
func (*ChainletStackFees) ProtoMessage()    {}
func (*ChainletStackFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_f413fb807a778764, []int{1}
}
func (m *ChainletStackFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainletStackFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainletStackFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainletStackFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainletStackFees.Merge(m, src)
}
func (m *ChainletStackFees) XXX_Size() int {
	return m.Size()
}
func (m *ChainletStackFees) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainletStackFees.DiscardUnknown(m)
}

var xxx_messageInfo_ChainletStackFees proto.InternalMessageInfo

func (m *ChainletStackFees) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *ChainletStackFees) GetEpochFee() string {
	if m != nil {
		return m.EpochFee
	}
	return ""
}

func (m *ChainletStackFees) GetSetupFee() string {
	if m != nil {
		return m.SetupFee
	}
	return ""
}

func init() {
	proto.RegisterType((*ChainletStack)(nil), "ssc.chainlet.ChainletStack")
	proto.RegisterType((*ChainletStackFees)(nil), "ssc.chainlet.ChainletStackFees")
}

func init() { proto.RegisterFile("ssc/chainlet/chainlet_stack.proto", fileDescriptor_f413fb807a778764) }

var fileDescriptor_f413fb807a778764 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xbf, 0x4e, 0x02, 0x41,
	0x10, 0xc6, 0xef, 0x04, 0x14, 0x17, 0x2d, 0xdc, 0x50, 0x5c, 0x28, 0x8e, 0x3f, 0x8d, 0x54, 0x77,
	0x89, 0x56, 0x96, 0x42, 0x42, 0x69, 0x0c, 0x76, 0x36, 0x64, 0x59, 0xc6, 0x63, 0x23, 0x77, 0xbb,
	0xd9, 0x59, 0x0c, 0xf8, 0x14, 0x3e, 0x16, 0x25, 0xa5, 0x95, 0x31, 0x50, 0xfb, 0x0e, 0xe6, 0xf6,
	0xb8, 0x03, 0x63, 0x42, 0x37, 0xdf, 0xfc, 0xbe, 0x99, 0xcc, 0x97, 0x21, 0x6d, 0x44, 0x1e, 0xf2,
	0x29, 0x13, 0xc9, 0x0c, 0x4c, 0x51, 0x8c, 0xd0, 0x30, 0xfe, 0x1a, 0x28, 0x2d, 0x8d, 0xa4, 0x17,
	0x88, 0x3c, 0xc8, 0x49, 0xa3, 0x1e, 0xc9, 0x48, 0x5a, 0x10, 0xa6, 0x55, 0xe6, 0x69, 0x74, 0x8f,
	0xac, 0x19, 0x29, 0xa6, 0x59, 0x8c, 0x99, 0xb3, 0xf3, 0xe3, 0x92, 0xcb, 0xfe, 0x8e, 0x3f, 0xa5,
	0x98, 0x7a, 0xe4, 0x8c, 0x6b, 0x60, 0x46, 0x6a, 0xcf, 0x6d, 0xb9, 0xdd, 0xf3, 0x61, 0x2e, 0x69,
	0x8b, 0xd4, 0x26, 0x02, 0xd5, 0x8c, 0x2d, 0x1f, 0x58, 0x0c, 0xde, 0x89, 0xa5, 0x87, 0x2d, 0xeb,
	0x00, 0xe4, 0x5a, 0x28, 0x23, 0x64, 0xe2, 0x95, 0x76, 0x8e, 0x7d, 0x8b, 0xf6, 0x49, 0xf5, 0x0d,
	0x34, 0x0a, 0x99, 0xa0, 0x57, 0x6e, 0x95, 0xba, 0xb5, 0x9b, 0x76, 0x70, 0x18, 0x28, 0xf8, 0x73,
	0xcc, 0xa3, 0x3d, 0xb5, 0x57, 0x5e, 0x7d, 0x35, 0x9d, 0x61, 0x31, 0x48, 0xef, 0x48, 0xf9, 0x05,
	0x00, 0xbd, 0x8a, 0x5d, 0xd0, 0x3c, 0xb2, 0x60, 0x00, 0x90, 0x8f, 0xdb, 0x91, 0x0e, 0x23, 0x57,
	0xff, 0x0c, 0xb4, 0x4e, 0x2a, 0x13, 0x48, 0x64, 0xbc, 0x0b, 0x9c, 0x09, 0xda, 0x20, 0x55, 0x50,
	0x92, 0x4f, 0x07, 0x90, 0x67, 0x2d, 0x74, 0xca, 0x10, 0xcc, 0x5c, 0xa5, 0x2c, 0x4b, 0x59, 0xe8,
	0xde, 0xfd, 0x6a, 0xe3, 0xbb, 0xeb, 0x8d, 0xef, 0x7e, 0x6f, 0x7c, 0xf7, 0x63, 0xeb, 0x3b, 0xeb,
	0xad, 0xef, 0x7c, 0x6e, 0x7d, 0xe7, 0xf9, 0x3a, 0x12, 0x66, 0x3a, 0x1f, 0x07, 0x5c, 0xc6, 0x21,
	0xb2, 0x88, 0x2d, 0x96, 0xef, 0x61, 0xfa, 0xa9, 0xc5, 0xfe, 0x57, 0x66, 0xa9, 0x00, 0xc7, 0xa7,
	0xf6, 0x39, 0xb7, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xdc, 0xa7, 0xcd, 0x0f, 0x02, 0x00,
	0x00,
}

func (m *ChainletStack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainletStack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletStack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainletStack(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Versions) > 0 {
		for iNdEx := len(m.Versions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Versions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainletStack(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintChainletStack(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintChainletStack(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintChainletStack(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChainletStackFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainletStackFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletStackFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SetupFee) > 0 {
		i -= len(m.SetupFee)
		copy(dAtA[i:], m.SetupFee)
		i = encodeVarintChainletStack(dAtA, i, uint64(len(m.SetupFee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EpochFee) > 0 {
		i -= len(m.EpochFee)
		copy(dAtA[i:], m.EpochFee)
		i = encodeVarintChainletStack(dAtA, i, uint64(len(m.EpochFee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintChainletStack(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintChainletStack(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainletStack(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainletStack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovChainletStack(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovChainletStack(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovChainletStack(uint64(l))
	}
	if len(m.Versions) > 0 {
		for _, e := range m.Versions {
			l = e.Size()
			n += 1 + l + sovChainletStack(uint64(l))
		}
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovChainletStack(uint64(l))
		}
	}
	return n
}

func (m *ChainletStackFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovChainletStack(uint64(l))
	}
	l = len(m.EpochFee)
	if l > 0 {
		n += 1 + l + sovChainletStack(uint64(l))
	}
	l = len(m.SetupFee)
	if l > 0 {
		n += 1 + l + sovChainletStack(uint64(l))
	}
	return n
}

func sovChainletStack(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainletStack(x uint64) (n int) {
	return sovChainletStack(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainletStack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainletStack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainletStack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainletStack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletStack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletStack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletStack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Versions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainletStack
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainletStack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Versions = append(m.Versions, ChainletStackParams{})
			if err := m.Versions[len(m.Versions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainletStack
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainletStack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, ChainletStackFees{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainletStack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainletStack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChainletStackFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainletStack
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainletStackFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainletStackFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletStack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletStack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetupFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletStack
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletStack
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SetupFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainletStack(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainletStack
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainletStack(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainletStack
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainletStack
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainletStack
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainletStack
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainletStack
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainletStack        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainletStack          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainletStack = fmt.Errorf("proto: unexpected end of group")
)
