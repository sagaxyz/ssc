// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/chainlet/events.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventLaunchChainlet struct {
	// option (gogoproto.goproto_stringer) = false;
	ChainName    string `protobuf:"bytes,1,opt,name=chainName,proto3" json:"chainName,omitempty"`
	Launcher     string `protobuf:"bytes,2,opt,name=launcher,proto3" json:"launcher,omitempty"`
	ChainId      string `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Stack        string `protobuf:"bytes,4,opt,name=stack,proto3" json:"stack,omitempty"`
	StackVersion string `protobuf:"bytes,5,opt,name=stackVersion,proto3" json:"stackVersion,omitempty"`
}

func (m *EventLaunchChainlet) Reset()         { *m = EventLaunchChainlet{} }
func (m *EventLaunchChainlet) String() string { return proto.CompactTextString(m) }
func (*EventLaunchChainlet) ProtoMessage()    {}
func (*EventLaunchChainlet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7824474c202708e0, []int{0}
}
func (m *EventLaunchChainlet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventLaunchChainlet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventLaunchChainlet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventLaunchChainlet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventLaunchChainlet.Merge(m, src)
}
func (m *EventLaunchChainlet) XXX_Size() int {
	return m.Size()
}
func (m *EventLaunchChainlet) XXX_DiscardUnknown() {
	xxx_messageInfo_EventLaunchChainlet.DiscardUnknown(m)
}

var xxx_messageInfo_EventLaunchChainlet proto.InternalMessageInfo

func (m *EventLaunchChainlet) GetChainName() string {
	if m != nil {
		return m.ChainName
	}
	return ""
}

func (m *EventLaunchChainlet) GetLauncher() string {
	if m != nil {
		return m.Launcher
	}
	return ""
}

func (m *EventLaunchChainlet) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventLaunchChainlet) GetStack() string {
	if m != nil {
		return m.Stack
	}
	return ""
}

func (m *EventLaunchChainlet) GetStackVersion() string {
	if m != nil {
		return m.StackVersion
	}
	return ""
}

type EventNewChainletStack struct {
	// option (gogoproto.goproto_stringer) = false;
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *EventNewChainletStack) Reset()         { *m = EventNewChainletStack{} }
func (m *EventNewChainletStack) String() string { return proto.CompactTextString(m) }
func (*EventNewChainletStack) ProtoMessage()    {}
func (*EventNewChainletStack) Descriptor() ([]byte, []int) {
	return fileDescriptor_7824474c202708e0, []int{1}
}
func (m *EventNewChainletStack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewChainletStack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewChainletStack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewChainletStack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewChainletStack.Merge(m, src)
}
func (m *EventNewChainletStack) XXX_Size() int {
	return m.Size()
}
func (m *EventNewChainletStack) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewChainletStack.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewChainletStack proto.InternalMessageInfo

func (m *EventNewChainletStack) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventNewChainletStack) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventNewChainletStack) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type EventNewChainletStackVersion struct {
	// option (gogoproto.goproto_stringer) = false;
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *EventNewChainletStackVersion) Reset()         { *m = EventNewChainletStackVersion{} }
func (m *EventNewChainletStackVersion) String() string { return proto.CompactTextString(m) }
func (*EventNewChainletStackVersion) ProtoMessage()    {}
func (*EventNewChainletStackVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_7824474c202708e0, []int{2}
}
func (m *EventNewChainletStackVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventNewChainletStackVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventNewChainletStackVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventNewChainletStackVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventNewChainletStackVersion.Merge(m, src)
}
func (m *EventNewChainletStackVersion) XXX_Size() int {
	return m.Size()
}
func (m *EventNewChainletStackVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_EventNewChainletStackVersion.DiscardUnknown(m)
}

var xxx_messageInfo_EventNewChainletStackVersion proto.InternalMessageInfo

func (m *EventNewChainletStackVersion) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventNewChainletStackVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type EventChainletStackVersionDisabled struct {
	// option (gogoproto.goproto_stringer) = false;
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *EventChainletStackVersionDisabled) Reset()         { *m = EventChainletStackVersionDisabled{} }
func (m *EventChainletStackVersionDisabled) String() string { return proto.CompactTextString(m) }
func (*EventChainletStackVersionDisabled) ProtoMessage()    {}
func (*EventChainletStackVersionDisabled) Descriptor() ([]byte, []int) {
	return fileDescriptor_7824474c202708e0, []int{3}
}
func (m *EventChainletStackVersionDisabled) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChainletStackVersionDisabled) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChainletStackVersionDisabled.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChainletStackVersionDisabled) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChainletStackVersionDisabled.Merge(m, src)
}
func (m *EventChainletStackVersionDisabled) XXX_Size() int {
	return m.Size()
}
func (m *EventChainletStackVersionDisabled) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChainletStackVersionDisabled.DiscardUnknown(m)
}

var xxx_messageInfo_EventChainletStackVersionDisabled proto.InternalMessageInfo

func (m *EventChainletStackVersionDisabled) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventChainletStackVersionDisabled) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type EventUpdateChainlet struct {
	// option (gogoproto.goproto_stringer) = false;
	ChainId      string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	StackVersion string `protobuf:"bytes,2,opt,name=stackVersion,proto3" json:"stackVersion,omitempty"`
}

func (m *EventUpdateChainlet) Reset()         { *m = EventUpdateChainlet{} }
func (m *EventUpdateChainlet) String() string { return proto.CompactTextString(m) }
func (*EventUpdateChainlet) ProtoMessage()    {}
func (*EventUpdateChainlet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7824474c202708e0, []int{4}
}
func (m *EventUpdateChainlet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateChainlet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateChainlet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateChainlet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateChainlet.Merge(m, src)
}
func (m *EventUpdateChainlet) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateChainlet) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateChainlet.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateChainlet proto.InternalMessageInfo

func (m *EventUpdateChainlet) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventUpdateChainlet) GetStackVersion() string {
	if m != nil {
		return m.StackVersion
	}
	return ""
}

type EventChainletStopped struct {
	// option (gogoproto.goproto_stringer) = false;
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *EventChainletStopped) Reset()         { *m = EventChainletStopped{} }
func (m *EventChainletStopped) String() string { return proto.CompactTextString(m) }
func (*EventChainletStopped) ProtoMessage()    {}
func (*EventChainletStopped) Descriptor() ([]byte, []int) {
	return fileDescriptor_7824474c202708e0, []int{5}
}
func (m *EventChainletStopped) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChainletStopped) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChainletStopped.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChainletStopped) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChainletStopped.Merge(m, src)
}
func (m *EventChainletStopped) XXX_Size() int {
	return m.Size()
}
func (m *EventChainletStopped) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChainletStopped.DiscardUnknown(m)
}

var xxx_messageInfo_EventChainletStopped proto.InternalMessageInfo

func (m *EventChainletStopped) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type EventChainletRestarted struct {
	// option (gogoproto.goproto_stringer) = false;
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	By      string `protobuf:"bytes,2,opt,name=by,proto3" json:"by,omitempty"`
}

func (m *EventChainletRestarted) Reset()         { *m = EventChainletRestarted{} }
func (m *EventChainletRestarted) String() string { return proto.CompactTextString(m) }
func (*EventChainletRestarted) ProtoMessage()    {}
func (*EventChainletRestarted) Descriptor() ([]byte, []int) {
	return fileDescriptor_7824474c202708e0, []int{6}
}
func (m *EventChainletRestarted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventChainletRestarted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventChainletRestarted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventChainletRestarted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventChainletRestarted.Merge(m, src)
}
func (m *EventChainletRestarted) XXX_Size() int {
	return m.Size()
}
func (m *EventChainletRestarted) XXX_DiscardUnknown() {
	xxx_messageInfo_EventChainletRestarted.DiscardUnknown(m)
}

var xxx_messageInfo_EventChainletRestarted proto.InternalMessageInfo

func (m *EventChainletRestarted) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *EventChainletRestarted) GetBy() string {
	if m != nil {
		return m.By
	}
	return ""
}

type EventUpdateChainletFees struct {
	// option (gogoproto.goproto_stringer) = false;
	StackName string `protobuf:"bytes,1,opt,name=stackName,proto3" json:"stackName,omitempty"`
	Fees      string `protobuf:"bytes,2,opt,name=fees,proto3" json:"fees,omitempty"`
	By        string `protobuf:"bytes,3,opt,name=by,proto3" json:"by,omitempty"`
}

func (m *EventUpdateChainletFees) Reset()         { *m = EventUpdateChainletFees{} }
func (m *EventUpdateChainletFees) String() string { return proto.CompactTextString(m) }
func (*EventUpdateChainletFees) ProtoMessage()    {}
func (*EventUpdateChainletFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_7824474c202708e0, []int{7}
}
func (m *EventUpdateChainletFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventUpdateChainletFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventUpdateChainletFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventUpdateChainletFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventUpdateChainletFees.Merge(m, src)
}
func (m *EventUpdateChainletFees) XXX_Size() int {
	return m.Size()
}
func (m *EventUpdateChainletFees) XXX_DiscardUnknown() {
	xxx_messageInfo_EventUpdateChainletFees.DiscardUnknown(m)
}

var xxx_messageInfo_EventUpdateChainletFees proto.InternalMessageInfo

func (m *EventUpdateChainletFees) GetStackName() string {
	if m != nil {
		return m.StackName
	}
	return ""
}

func (m *EventUpdateChainletFees) GetFees() string {
	if m != nil {
		return m.Fees
	}
	return ""
}

func (m *EventUpdateChainletFees) GetBy() string {
	if m != nil {
		return m.By
	}
	return ""
}

func init() {
	proto.RegisterType((*EventLaunchChainlet)(nil), "ssc.chainlet.EventLaunchChainlet")
	proto.RegisterType((*EventNewChainletStack)(nil), "ssc.chainlet.EventNewChainletStack")
	proto.RegisterType((*EventNewChainletStackVersion)(nil), "ssc.chainlet.EventNewChainletStackVersion")
	proto.RegisterType((*EventChainletStackVersionDisabled)(nil), "ssc.chainlet.EventChainletStackVersionDisabled")
	proto.RegisterType((*EventUpdateChainlet)(nil), "ssc.chainlet.EventUpdateChainlet")
	proto.RegisterType((*EventChainletStopped)(nil), "ssc.chainlet.EventChainletStopped")
	proto.RegisterType((*EventChainletRestarted)(nil), "ssc.chainlet.EventChainletRestarted")
	proto.RegisterType((*EventUpdateChainletFees)(nil), "ssc.chainlet.EventUpdateChainletFees")
}

func init() { proto.RegisterFile("ssc/chainlet/events.proto", fileDescriptor_7824474c202708e0) }

var fileDescriptor_7824474c202708e0 = []byte{
	// 406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6e, 0xda, 0x40,
	0x14, 0x66, 0x0c, 0xb4, 0x65, 0x84, 0xba, 0x98, 0xd2, 0xd6, 0x45, 0xc8, 0x6a, 0xbd, 0x69, 0x57,
	0xb8, 0x52, 0x4f, 0x50, 0xf2, 0x23, 0x45, 0x42, 0x48, 0x01, 0x25, 0x8b, 0x64, 0x11, 0x8d, 0xed,
	0x17, 0x63, 0x05, 0x3c, 0x96, 0x67, 0x20, 0x38, 0xa7, 0xc8, 0x1d, 0x72, 0x99, 0x2c, 0x59, 0x66,
	0x19, 0xc1, 0x45, 0xa2, 0x19, 0xc6, 0x06, 0x23, 0x27, 0x52, 0x76, 0xef, 0xf7, 0x7b, 0xdf, 0x7c,
	0x6f, 0x1e, 0xfe, 0xc1, 0xb9, 0xe7, 0x78, 0x63, 0x1a, 0x46, 0x13, 0x10, 0x0e, 0xcc, 0x21, 0x12,
	0xbc, 0x1b, 0x27, 0x4c, 0x30, 0xd2, 0xe4, 0xdc, 0xeb, 0x66, 0xa9, 0x76, 0x2b, 0x60, 0x01, 0x53,
	0x09, 0x47, 0x5a, 0x9b, 0x1a, 0xfb, 0x01, 0xe1, 0x2f, 0x47, 0xb2, 0xa9, 0x4f, 0x67, 0x91, 0x37,
	0x3e, 0xd0, 0xd5, 0xa4, 0x83, 0x1b, 0xaa, 0x73, 0x40, 0xa7, 0x60, 0xa2, 0x9f, 0xe8, 0x4f, 0x63,
	0xb8, 0x0d, 0x90, 0x36, 0xfe, 0x34, 0x51, 0xf5, 0x90, 0x98, 0x86, 0x4a, 0xe6, 0x3e, 0x31, 0xf1,
	0x47, 0x55, 0x78, 0xe2, 0x9b, 0x55, 0x95, 0xca, 0x5c, 0xd2, 0xc2, 0x75, 0x2e, 0xa8, 0x77, 0x63,
	0xd6, 0x54, 0x7c, 0xe3, 0x10, 0x1b, 0x37, 0x95, 0x71, 0x0e, 0x09, 0x0f, 0x59, 0x64, 0xd6, 0x55,
	0xb2, 0x10, 0xb3, 0xaf, 0xf0, 0x57, 0x45, 0x72, 0x00, 0xb7, 0x19, 0xc3, 0x91, 0x6a, 0x96, 0xc3,
	0x12, 0xa0, 0x82, 0x25, 0x9a, 0x64, 0xe6, 0x12, 0x82, 0x6b, 0x91, 0xe4, 0xbe, 0xa1, 0xa7, 0x6c,
	0x59, 0x3d, 0xd7, 0x53, 0x34, 0x35, 0xed, 0xda, 0x7d, 0xdc, 0x29, 0x1d, 0xa0, 0x09, 0xe4, 0x68,
	0xa8, 0x1c, 0xcd, 0x28, 0xa2, 0x9d, 0xe2, 0x5f, 0x0a, 0xad, 0x0c, 0xea, 0x30, 0xe4, 0xd4, 0x9d,
	0x80, 0xff, 0x4e, 0xc8, 0x91, 0x5e, 0xd3, 0x59, 0xec, 0x53, 0x01, 0xf9, 0x9a, 0x76, 0xc4, 0x46,
	0x45, 0xb1, 0xf7, 0x65, 0x35, 0x4a, 0x64, 0xfd, 0x8b, 0x5b, 0x7b, 0x3c, 0x59, 0x1c, 0x83, 0xff,
	0x3a, 0xaa, 0xdd, 0xc3, 0xdf, 0x0a, 0x1d, 0x43, 0xe0, 0x82, 0x26, 0xe2, 0xad, 0x1e, 0xf2, 0x19,
	0x1b, 0x6e, 0xaa, 0xe7, 0x1b, 0x6e, 0x6a, 0x5f, 0xe2, 0xef, 0x25, 0x4f, 0x39, 0x06, 0xe0, 0xf2,
	0xd7, 0x29, 0x82, 0xbb, 0xbf, 0x2e, 0x0f, 0x48, 0xc5, 0xae, 0x01, 0x78, 0xb6, 0x52, 0x69, 0x6b,
	0xf0, 0x6a, 0x06, 0xde, 0xfb, 0xff, 0xb8, 0xb2, 0xd0, 0x72, 0x65, 0xa1, 0xe7, 0x95, 0x85, 0xee,
	0xd7, 0x56, 0x65, 0xb9, 0xb6, 0x2a, 0x4f, 0x6b, 0xab, 0x72, 0xf1, 0x3b, 0x08, 0xc5, 0x78, 0xe6,
	0x76, 0x3d, 0x36, 0x75, 0x38, 0x0d, 0xe8, 0x22, 0xbd, 0x73, 0xe4, 0xed, 0x2c, 0xb6, 0xd7, 0x23,
	0xd2, 0x18, 0xb8, 0xfb, 0x41, 0x5d, 0xc6, 0xbf, 0x97, 0x00, 0x00, 0x00, 0xff, 0xff, 0x81, 0x99,
	0xef, 0x54, 0x5a, 0x03, 0x00, 0x00,
}

func (m *EventLaunchChainlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventLaunchChainlet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventLaunchChainlet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StackVersion) > 0 {
		i -= len(m.StackVersion)
		copy(dAtA[i:], m.StackVersion)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StackVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Stack) > 0 {
		i -= len(m.Stack)
		copy(dAtA[i:], m.Stack)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Stack)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Launcher) > 0 {
		i -= len(m.Launcher)
		copy(dAtA[i:], m.Launcher)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Launcher)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainName) > 0 {
		i -= len(m.ChainName)
		copy(dAtA[i:], m.ChainName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventNewChainletStack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewChainletStack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewChainletStack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventNewChainletStackVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventNewChainletStackVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventNewChainletStackVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChainletStackVersionDisabled) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChainletStackVersionDisabled) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChainletStackVersionDisabled) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateChainlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateChainlet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateChainlet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StackVersion) > 0 {
		i -= len(m.StackVersion)
		copy(dAtA[i:], m.StackVersion)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StackVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChainletStopped) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChainletStopped) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChainletStopped) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventChainletRestarted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventChainletRestarted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventChainletRestarted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.By) > 0 {
		i -= len(m.By)
		copy(dAtA[i:], m.By)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.By)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventUpdateChainletFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventUpdateChainletFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventUpdateChainletFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.By) > 0 {
		i -= len(m.By)
		copy(dAtA[i:], m.By)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.By)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fees) > 0 {
		i -= len(m.Fees)
		copy(dAtA[i:], m.Fees)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Fees)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.StackName) > 0 {
		i -= len(m.StackName)
		copy(dAtA[i:], m.StackName)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StackName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventLaunchChainlet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Launcher)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Stack)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StackVersion)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventNewChainletStack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventNewChainletStackVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventChainletStackVersionDisabled) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateChainlet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StackVersion)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventChainletStopped) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventChainletRestarted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.By)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventUpdateChainletFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StackName)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Fees)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.By)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventLaunchChainlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventLaunchChainlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventLaunchChainlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Launcher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Launcher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stack", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stack = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewChainletStack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewChainletStack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewChainletStack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventNewChainletStackVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventNewChainletStackVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventNewChainletStackVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChainletStackVersionDisabled) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChainletStackVersionDisabled: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChainletStackVersionDisabled: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateChainlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateChainlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateChainlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChainletStopped) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChainletStopped: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChainletStopped: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventChainletRestarted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventChainletRestarted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventChainletRestarted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field By", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.By = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventUpdateChainletFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventUpdateChainletFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventUpdateChainletFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field By", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.By = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
