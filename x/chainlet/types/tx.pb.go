// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/chainlet/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateChainletStack struct {
	Creator     string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DisplayName string            `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Description string            `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Image       string            `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
	Version     string            `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Checksum    string            `protobuf:"bytes,6,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Fees        ChainletStackFees `protobuf:"bytes,7,opt,name=fees,proto3" json:"fees"`
	CcvConsumer bool              `protobuf:"varint,8,opt,name=ccvConsumer,proto3" json:"ccvConsumer,omitempty"`
}

func (m *MsgCreateChainletStack) Reset()         { *m = MsgCreateChainletStack{} }
func (m *MsgCreateChainletStack) String() string { return proto.CompactTextString(m) }
func (*MsgCreateChainletStack) ProtoMessage()    {}
func (*MsgCreateChainletStack) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{0}
}
func (m *MsgCreateChainletStack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateChainletStack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateChainletStack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateChainletStack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateChainletStack.Merge(m, src)
}
func (m *MsgCreateChainletStack) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateChainletStack) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateChainletStack.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateChainletStack proto.InternalMessageInfo

func (m *MsgCreateChainletStack) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateChainletStack) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MsgCreateChainletStack) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgCreateChainletStack) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MsgCreateChainletStack) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MsgCreateChainletStack) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *MsgCreateChainletStack) GetFees() ChainletStackFees {
	if m != nil {
		return m.Fees
	}
	return ChainletStackFees{}
}

func (m *MsgCreateChainletStack) GetCcvConsumer() bool {
	if m != nil {
		return m.CcvConsumer
	}
	return false
}

type MsgCreateChainletStackResponse struct {
}

func (m *MsgCreateChainletStackResponse) Reset()         { *m = MsgCreateChainletStackResponse{} }
func (m *MsgCreateChainletStackResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateChainletStackResponse) ProtoMessage()    {}
func (*MsgCreateChainletStackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{1}
}
func (m *MsgCreateChainletStackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateChainletStackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateChainletStackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateChainletStackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateChainletStackResponse.Merge(m, src)
}
func (m *MsgCreateChainletStackResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateChainletStackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateChainletStackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateChainletStackResponse proto.InternalMessageInfo

type MsgLaunchChainlet struct {
	Creator                       string         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainletName                  string         `protobuf:"bytes,2,opt,name=chainletName,proto3" json:"chainletName,omitempty"`
	ChainId                       string         `protobuf:"bytes,3,opt,name=chainId,proto3" json:"chainId,omitempty"`
	ChainletStackName             string         `protobuf:"bytes,4,opt,name=chainletStackName,proto3" json:"chainletStackName,omitempty"`
	ChainletStackVersion          string         `protobuf:"bytes,5,opt,name=chainletStackVersion,proto3" json:"chainletStackVersion,omitempty"`
	Maintainers                   []string       `protobuf:"bytes,6,rep,name=maintainers,proto3" json:"maintainers,omitempty"`
	Denom                         string         `protobuf:"bytes,7,opt,name=denom,proto3" json:"denom,omitempty"`
	Params                        ChainletParams `protobuf:"bytes,8,opt,name=params,proto3" json:"params"`
	DisableAutomaticStackUpgrades bool           `protobuf:"varint,9,opt,name=disableAutomaticStackUpgrades,proto3" json:"disableAutomaticStackUpgrades,omitempty"`
	IsServiceChainlet             bool           `protobuf:"varint,10,opt,name=isServiceChainlet,proto3" json:"isServiceChainlet,omitempty"`
	Tags                          []string       `protobuf:"bytes,11,rep,name=tags,proto3" json:"tags,omitempty"`
	CustomLauncher                string         `protobuf:"bytes,12,opt,name=customLauncher,proto3" json:"customLauncher,omitempty"`
}

func (m *MsgLaunchChainlet) Reset()         { *m = MsgLaunchChainlet{} }
func (m *MsgLaunchChainlet) String() string { return proto.CompactTextString(m) }
func (*MsgLaunchChainlet) ProtoMessage()    {}
func (*MsgLaunchChainlet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{2}
}
func (m *MsgLaunchChainlet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLaunchChainlet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLaunchChainlet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLaunchChainlet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLaunchChainlet.Merge(m, src)
}
func (m *MsgLaunchChainlet) XXX_Size() int {
	return m.Size()
}
func (m *MsgLaunchChainlet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLaunchChainlet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLaunchChainlet proto.InternalMessageInfo

func (m *MsgLaunchChainlet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgLaunchChainlet) GetChainletName() string {
	if m != nil {
		return m.ChainletName
	}
	return ""
}

func (m *MsgLaunchChainlet) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgLaunchChainlet) GetChainletStackName() string {
	if m != nil {
		return m.ChainletStackName
	}
	return ""
}

func (m *MsgLaunchChainlet) GetChainletStackVersion() string {
	if m != nil {
		return m.ChainletStackVersion
	}
	return ""
}

func (m *MsgLaunchChainlet) GetMaintainers() []string {
	if m != nil {
		return m.Maintainers
	}
	return nil
}

func (m *MsgLaunchChainlet) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *MsgLaunchChainlet) GetParams() ChainletParams {
	if m != nil {
		return m.Params
	}
	return ChainletParams{}
}

func (m *MsgLaunchChainlet) GetDisableAutomaticStackUpgrades() bool {
	if m != nil {
		return m.DisableAutomaticStackUpgrades
	}
	return false
}

func (m *MsgLaunchChainlet) GetIsServiceChainlet() bool {
	if m != nil {
		return m.IsServiceChainlet
	}
	return false
}

func (m *MsgLaunchChainlet) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *MsgLaunchChainlet) GetCustomLauncher() string {
	if m != nil {
		return m.CustomLauncher
	}
	return ""
}

type MsgLaunchChainletResponse struct {
}

func (m *MsgLaunchChainletResponse) Reset()         { *m = MsgLaunchChainletResponse{} }
func (m *MsgLaunchChainletResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLaunchChainletResponse) ProtoMessage()    {}
func (*MsgLaunchChainletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{3}
}
func (m *MsgLaunchChainletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLaunchChainletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLaunchChainletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLaunchChainletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLaunchChainletResponse.Merge(m, src)
}
func (m *MsgLaunchChainletResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLaunchChainletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLaunchChainletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLaunchChainletResponse proto.InternalMessageInfo

type MsgUpdateChainletStack struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Image       string `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	Checksum    string `protobuf:"bytes,5,opt,name=checksum,proto3" json:"checksum,omitempty"`
	CcvConsumer bool   `protobuf:"varint,6,opt,name=ccvConsumer,proto3" json:"ccvConsumer,omitempty"`
}

func (m *MsgUpdateChainletStack) Reset()         { *m = MsgUpdateChainletStack{} }
func (m *MsgUpdateChainletStack) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainletStack) ProtoMessage()    {}
func (*MsgUpdateChainletStack) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{4}
}
func (m *MsgUpdateChainletStack) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainletStack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainletStack.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainletStack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainletStack.Merge(m, src)
}
func (m *MsgUpdateChainletStack) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainletStack) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainletStack.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainletStack proto.InternalMessageInfo

func (m *MsgUpdateChainletStack) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateChainletStack) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MsgUpdateChainletStack) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

func (m *MsgUpdateChainletStack) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MsgUpdateChainletStack) GetChecksum() string {
	if m != nil {
		return m.Checksum
	}
	return ""
}

func (m *MsgUpdateChainletStack) GetCcvConsumer() bool {
	if m != nil {
		return m.CcvConsumer
	}
	return false
}

type MsgUpdateChainletStackResponse struct {
}

func (m *MsgUpdateChainletStackResponse) Reset()         { *m = MsgUpdateChainletStackResponse{} }
func (m *MsgUpdateChainletStackResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainletStackResponse) ProtoMessage()    {}
func (*MsgUpdateChainletStackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{5}
}
func (m *MsgUpdateChainletStackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainletStackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainletStackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainletStackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainletStackResponse.Merge(m, src)
}
func (m *MsgUpdateChainletStackResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainletStackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainletStackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainletStackResponse proto.InternalMessageInfo

type MsgDisableChainletStackVersion struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=displayName,proto3" json:"displayName,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *MsgDisableChainletStackVersion) Reset()         { *m = MsgDisableChainletStackVersion{} }
func (m *MsgDisableChainletStackVersion) String() string { return proto.CompactTextString(m) }
func (*MsgDisableChainletStackVersion) ProtoMessage()    {}
func (*MsgDisableChainletStackVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{6}
}
func (m *MsgDisableChainletStackVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableChainletStackVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableChainletStackVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableChainletStackVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableChainletStackVersion.Merge(m, src)
}
func (m *MsgDisableChainletStackVersion) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableChainletStackVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableChainletStackVersion.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableChainletStackVersion proto.InternalMessageInfo

func (m *MsgDisableChainletStackVersion) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgDisableChainletStackVersion) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *MsgDisableChainletStackVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

type MsgDisableChainletStackVersionResponse struct {
}

func (m *MsgDisableChainletStackVersionResponse) Reset() {
	*m = MsgDisableChainletStackVersionResponse{}
}
func (m *MsgDisableChainletStackVersionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisableChainletStackVersionResponse) ProtoMessage()    {}
func (*MsgDisableChainletStackVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{7}
}
func (m *MsgDisableChainletStackVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableChainletStackVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableChainletStackVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableChainletStackVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableChainletStackVersionResponse.Merge(m, src)
}
func (m *MsgDisableChainletStackVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableChainletStackVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableChainletStackVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableChainletStackVersionResponse proto.InternalMessageInfo

type MsgUpgradeChainlet struct {
	Creator         string         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId         string         `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	StackVersion    string         `protobuf:"bytes,3,opt,name=stackVersion,proto3" json:"stackVersion,omitempty"`
	HeightDelta     uint64         `protobuf:"varint,4,opt,name=heightDelta,proto3" json:"heightDelta,omitempty"`
	ChannelId       string         `protobuf:"bytes,5,opt,name=channelId,proto3" json:"channelId,omitempty"`
	UnbondingPeriod *time.Duration `protobuf:"bytes,6,opt,name=unbondingPeriod,proto3,stdduration" json:"unbondingPeriod,omitempty"`
}

func (m *MsgUpgradeChainlet) Reset()         { *m = MsgUpgradeChainlet{} }
func (m *MsgUpgradeChainlet) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeChainlet) ProtoMessage()    {}
func (*MsgUpgradeChainlet) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{8}
}
func (m *MsgUpgradeChainlet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeChainlet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeChainlet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeChainlet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeChainlet.Merge(m, src)
}
func (m *MsgUpgradeChainlet) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeChainlet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeChainlet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeChainlet proto.InternalMessageInfo

func (m *MsgUpgradeChainlet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpgradeChainlet) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgUpgradeChainlet) GetStackVersion() string {
	if m != nil {
		return m.StackVersion
	}
	return ""
}

func (m *MsgUpgradeChainlet) GetHeightDelta() uint64 {
	if m != nil {
		return m.HeightDelta
	}
	return 0
}

func (m *MsgUpgradeChainlet) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *MsgUpgradeChainlet) GetUnbondingPeriod() *time.Duration {
	if m != nil {
		return m.UnbondingPeriod
	}
	return nil
}

type MsgUpgradeChainletResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *MsgUpgradeChainletResponse) Reset()         { *m = MsgUpgradeChainletResponse{} }
func (m *MsgUpgradeChainletResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpgradeChainletResponse) ProtoMessage()    {}
func (*MsgUpgradeChainletResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{9}
}
func (m *MsgUpgradeChainletResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpgradeChainletResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpgradeChainletResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpgradeChainletResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpgradeChainletResponse.Merge(m, src)
}
func (m *MsgUpgradeChainletResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpgradeChainletResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpgradeChainletResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpgradeChainletResponse proto.InternalMessageInfo

func (m *MsgUpgradeChainletResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type MsgCancelChainletUpgrade struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId   string `protobuf:"bytes,2,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Version   string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	ChannelId string `protobuf:"bytes,4,opt,name=channelId,proto3" json:"channelId,omitempty"`
}

func (m *MsgCancelChainletUpgrade) Reset()         { *m = MsgCancelChainletUpgrade{} }
func (m *MsgCancelChainletUpgrade) String() string { return proto.CompactTextString(m) }
func (*MsgCancelChainletUpgrade) ProtoMessage()    {}
func (*MsgCancelChainletUpgrade) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{10}
}
func (m *MsgCancelChainletUpgrade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelChainletUpgrade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelChainletUpgrade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelChainletUpgrade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelChainletUpgrade.Merge(m, src)
}
func (m *MsgCancelChainletUpgrade) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelChainletUpgrade) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelChainletUpgrade.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelChainletUpgrade proto.InternalMessageInfo

func (m *MsgCancelChainletUpgrade) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCancelChainletUpgrade) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *MsgCancelChainletUpgrade) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *MsgCancelChainletUpgrade) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

type MsgCancelChainletUpgradeResponse struct {
}

func (m *MsgCancelChainletUpgradeResponse) Reset()         { *m = MsgCancelChainletUpgradeResponse{} }
func (m *MsgCancelChainletUpgradeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelChainletUpgradeResponse) ProtoMessage()    {}
func (*MsgCancelChainletUpgradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{11}
}
func (m *MsgCancelChainletUpgradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelChainletUpgradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelChainletUpgradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelChainletUpgradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelChainletUpgradeResponse.Merge(m, src)
}
func (m *MsgCancelChainletUpgradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelChainletUpgradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelChainletUpgradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelChainletUpgradeResponse proto.InternalMessageInfo

type MsgUpdateChainletStackFees struct {
	Creator           string              `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainletStackName string              `protobuf:"bytes,2,opt,name=chainletStackName,proto3" json:"chainletStackName,omitempty"`
	Fees              []ChainletStackFees `protobuf:"bytes,3,rep,name=fees,proto3" json:"fees"`
}

func (m *MsgUpdateChainletStackFees) Reset()         { *m = MsgUpdateChainletStackFees{} }
func (m *MsgUpdateChainletStackFees) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainletStackFees) ProtoMessage()    {}
func (*MsgUpdateChainletStackFees) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{12}
}
func (m *MsgUpdateChainletStackFees) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainletStackFees) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainletStackFees.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainletStackFees) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainletStackFees.Merge(m, src)
}
func (m *MsgUpdateChainletStackFees) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainletStackFees) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainletStackFees.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainletStackFees proto.InternalMessageInfo

func (m *MsgUpdateChainletStackFees) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateChainletStackFees) GetChainletStackName() string {
	if m != nil {
		return m.ChainletStackName
	}
	return ""
}

func (m *MsgUpdateChainletStackFees) GetFees() []ChainletStackFees {
	if m != nil {
		return m.Fees
	}
	return nil
}

type MsgUpdateChainletStackFeesResponse struct {
}

func (m *MsgUpdateChainletStackFeesResponse) Reset()         { *m = MsgUpdateChainletStackFeesResponse{} }
func (m *MsgUpdateChainletStackFeesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateChainletStackFeesResponse) ProtoMessage()    {}
func (*MsgUpdateChainletStackFeesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7e7ff960f25a570e, []int{13}
}
func (m *MsgUpdateChainletStackFeesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateChainletStackFeesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateChainletStackFeesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateChainletStackFeesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateChainletStackFeesResponse.Merge(m, src)
}
func (m *MsgUpdateChainletStackFeesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateChainletStackFeesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateChainletStackFeesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateChainletStackFeesResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateChainletStack)(nil), "ssc.chainlet.MsgCreateChainletStack")
	proto.RegisterType((*MsgCreateChainletStackResponse)(nil), "ssc.chainlet.MsgCreateChainletStackResponse")
	proto.RegisterType((*MsgLaunchChainlet)(nil), "ssc.chainlet.MsgLaunchChainlet")
	proto.RegisterType((*MsgLaunchChainletResponse)(nil), "ssc.chainlet.MsgLaunchChainletResponse")
	proto.RegisterType((*MsgUpdateChainletStack)(nil), "ssc.chainlet.MsgUpdateChainletStack")
	proto.RegisterType((*MsgUpdateChainletStackResponse)(nil), "ssc.chainlet.MsgUpdateChainletStackResponse")
	proto.RegisterType((*MsgDisableChainletStackVersion)(nil), "ssc.chainlet.MsgDisableChainletStackVersion")
	proto.RegisterType((*MsgDisableChainletStackVersionResponse)(nil), "ssc.chainlet.MsgDisableChainletStackVersionResponse")
	proto.RegisterType((*MsgUpgradeChainlet)(nil), "ssc.chainlet.MsgUpgradeChainlet")
	proto.RegisterType((*MsgUpgradeChainletResponse)(nil), "ssc.chainlet.MsgUpgradeChainletResponse")
	proto.RegisterType((*MsgCancelChainletUpgrade)(nil), "ssc.chainlet.MsgCancelChainletUpgrade")
	proto.RegisterType((*MsgCancelChainletUpgradeResponse)(nil), "ssc.chainlet.MsgCancelChainletUpgradeResponse")
	proto.RegisterType((*MsgUpdateChainletStackFees)(nil), "ssc.chainlet.MsgUpdateChainletStackFees")
	proto.RegisterType((*MsgUpdateChainletStackFeesResponse)(nil), "ssc.chainlet.MsgUpdateChainletStackFeesResponse")
}

func init() { proto.RegisterFile("ssc/chainlet/tx.proto", fileDescriptor_7e7ff960f25a570e) }

var fileDescriptor_7e7ff960f25a570e = []byte{
	// 969 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x8f, 0xd3, 0x46,
	0x18, 0x5e, 0x27, 0xd9, 0xb0, 0xfb, 0x26, 0x02, 0x31, 0x7c, 0x19, 0x43, 0x13, 0xd7, 0x42, 0x4b,
	0x84, 0x90, 0xdd, 0xa6, 0x5c, 0xca, 0x8d, 0xdd, 0x55, 0x25, 0xa4, 0x6e, 0x85, 0x82, 0xe8, 0x01,
	0xa9, 0xaa, 0x26, 0xe3, 0xc1, 0x19, 0x11, 0x7b, 0x22, 0x8f, 0xbd, 0xda, 0xed, 0xa9, 0xad, 0x7a,
	0xe1, 0xd6, 0x43, 0x0f, 0xfd, 0x13, 0x48, 0xfc, 0x8c, 0x3d, 0xee, 0xb1, 0x27, 0x5a, 0xed, 0x1e,
	0xf8, 0x19, 0xad, 0x66, 0xfc, 0x81, 0xbf, 0x12, 0x42, 0xdb, 0x53, 0x3c, 0xef, 0x3c, 0x33, 0xf3,
	0x3e, 0xcf, 0xfb, 0x15, 0xb8, 0x26, 0x04, 0x71, 0xc8, 0x0c, 0xb3, 0x60, 0x4e, 0x23, 0x27, 0x3a,
	0xb2, 0x17, 0x21, 0x8f, 0x38, 0xea, 0x0b, 0x41, 0xec, 0xcc, 0x6c, 0x5c, 0xf5, 0xb8, 0xc7, 0xd5,
	0x86, 0x23, 0xbf, 0x12, 0x8c, 0x31, 0xf0, 0x38, 0xf7, 0xe6, 0xd4, 0x51, 0xab, 0x69, 0xfc, 0xc2,
	0x71, 0xe3, 0x10, 0x47, 0x8c, 0x07, 0xe9, 0xfe, 0x0d, 0xc2, 0x85, 0xcf, 0x85, 0xe3, 0x0b, 0xcf,
	0x39, 0xfc, 0x5c, 0xfe, 0xa4, 0x1b, 0x56, 0xe9, 0xcd, 0xec, 0xe3, 0xfb, 0x05, 0x0e, 0xb1, 0x2f,
	0x52, 0xcc, 0xa7, 0xcd, 0x18, 0x11, 0x61, 0xf2, 0x32, 0x81, 0x58, 0xaf, 0x5b, 0x70, 0xfd, 0x40,
	0x78, 0x7b, 0x21, 0xc5, 0x11, 0xdd, 0x4b, 0x11, 0x4f, 0x25, 0x00, 0xe9, 0x70, 0x81, 0x48, 0x33,
	0x0f, 0x75, 0xcd, 0xd4, 0x46, 0xdb, 0x93, 0x6c, 0x89, 0x4c, 0xe8, 0xb9, 0x4c, 0x2c, 0xe6, 0xf8,
	0xf8, 0x1b, 0xec, 0x53, 0xbd, 0xa5, 0x76, 0x8b, 0x26, 0x85, 0xa0, 0x82, 0x84, 0x6c, 0x21, 0xb9,
	0xe8, 0xed, 0x14, 0xf1, 0xde, 0x84, 0xae, 0xc2, 0x26, 0xf3, 0xb1, 0x47, 0xf5, 0x8e, 0xda, 0x4b,
	0x16, 0xf2, 0xcd, 0x43, 0x1a, 0x0a, 0x79, 0x66, 0x33, 0x79, 0x33, 0x5d, 0x22, 0x03, 0xb6, 0xc8,
	0x8c, 0x92, 0x97, 0x22, 0xf6, 0xf5, 0xae, 0xda, 0xca, 0xd7, 0xe8, 0x4b, 0xe8, 0xbc, 0xa0, 0x54,
	0xe8, 0x17, 0x4c, 0x6d, 0xd4, 0x1b, 0x0f, 0xed, 0xa2, 0xee, 0x76, 0x89, 0xd4, 0x57, 0x94, 0x8a,
	0xdd, 0xce, 0xc9, 0xdb, 0xe1, 0xc6, 0x44, 0x1d, 0x91, 0x8e, 0x12, 0x72, 0xb8, 0xc7, 0x03, 0x11,
	0xfb, 0x34, 0xd4, 0xb7, 0x4c, 0x6d, 0xb4, 0x35, 0x29, 0x9a, 0x1e, 0xf6, 0x7f, 0x7e, 0xf7, 0xe6,
	0x5e, 0x46, 0xdd, 0x32, 0x61, 0xd0, 0x2c, 0xd7, 0x84, 0x8a, 0x05, 0x0f, 0x04, 0xb5, 0xfe, 0x6e,
	0xc3, 0xe5, 0x03, 0xe1, 0x7d, 0x8d, 0xe3, 0x80, 0xcc, 0x32, 0xc8, 0x0a, 0x31, 0x2d, 0xe8, 0x67,
	0xbe, 0x16, 0xd4, 0x2c, 0xd9, 0xd4, 0x69, 0xb9, 0x7e, 0xec, 0xa6, 0x52, 0x66, 0x4b, 0x74, 0x1f,
	0x2e, 0x93, 0xa2, 0x1b, 0xea, 0x8a, 0x44, 0xd2, 0xfa, 0x06, 0x1a, 0xc3, 0xd5, 0x92, 0xf1, 0xdb,
	0x92, 0xd6, 0x8d, 0x7b, 0x52, 0x21, 0x1f, 0xb3, 0x20, 0xc2, 0x2c, 0xa0, 0xa1, 0xd0, 0xbb, 0x66,
	0x5b, 0x86, 0xb2, 0x60, 0x92, 0xa1, 0x74, 0x69, 0xc0, 0x7d, 0xa5, 0xff, 0xf6, 0x24, 0x59, 0xa0,
	0x87, 0xd0, 0x4d, 0x92, 0x51, 0x89, 0xda, 0x1b, 0xdf, 0x6e, 0x0e, 0xcb, 0x13, 0x85, 0x49, 0x63,
	0x92, 0x9e, 0x40, 0xfb, 0xf0, 0x89, 0xcb, 0x04, 0x9e, 0xce, 0xe9, 0xa3, 0x38, 0xe2, 0x3e, 0x8e,
	0x18, 0x51, 0x3e, 0x3d, 0x5b, 0x78, 0x21, 0x76, 0xa9, 0xd0, 0xb7, 0x55, 0x9c, 0x56, 0x83, 0xa4,
	0x36, 0x4c, 0x3c, 0xa5, 0xe1, 0x21, 0x23, 0x79, 0xac, 0x74, 0x50, 0x27, 0xeb, 0x1b, 0x08, 0x41,
	0x27, 0xc2, 0x9e, 0xd0, 0x7b, 0x8a, 0xa0, 0xfa, 0x46, 0x3b, 0x70, 0x91, 0xc4, 0x22, 0xe2, 0x7e,
	0x12, 0x4d, 0x1a, 0xea, 0x7d, 0x45, 0xb1, 0x62, 0xad, 0xe4, 0xc8, 0x2d, 0xb8, 0x59, 0x4b, 0x80,
	0x3c, 0x3d, 0x4e, 0x35, 0x55, 0x70, 0xcf, 0x16, 0xee, 0xff, 0x5a, 0x70, 0x79, 0x39, 0xb5, 0x97,
	0x94, 0x53, 0x67, 0x79, 0x39, 0x6d, 0x56, 0xca, 0xa9, 0x52, 0x13, 0xdd, 0xf5, 0x6a, 0xa2, 0x81,
	0x51, 0x4e, 0xfa, 0x17, 0x4d, 0x41, 0xf6, 0x93, 0x70, 0xed, 0x35, 0xa5, 0xd9, 0x7f, 0x21, 0x5f,
	0xa0, 0xd9, 0x2e, 0xd1, 0xac, 0x38, 0x3a, 0x82, 0x9d, 0xd5, 0x5e, 0xe4, 0x0e, 0xbf, 0x6a, 0x01,
	0x52, 0x9c, 0x54, 0x2a, 0xad, 0x51, 0xc5, 0x85, 0x0a, 0x6d, 0x95, 0x2b, 0xd4, 0x82, 0xbe, 0x28,
	0xd6, 0x5a, 0xe2, 0x61, 0xc9, 0x26, 0x29, 0xce, 0x28, 0xf3, 0x66, 0xd1, 0x3e, 0x9d, 0x47, 0x58,
	0xc5, 0xaa, 0x33, 0x29, 0x9a, 0xd0, 0x6d, 0xd8, 0x26, 0x33, 0x1c, 0x04, 0x74, 0xfe, 0xd8, 0x4d,
	0x03, 0xf6, 0xde, 0x80, 0x0e, 0xe0, 0x52, 0x1c, 0x4c, 0x79, 0xe0, 0xb2, 0xc0, 0x7b, 0x42, 0x43,
	0xc6, 0x5d, 0x15, 0xb5, 0xde, 0xf8, 0xa6, 0x9d, 0xcc, 0x17, 0x3b, 0x9b, 0x2f, 0xf6, 0x7e, 0x3a,
	0x5f, 0x76, 0xb7, 0x4e, 0xde, 0x0e, 0xb5, 0xdf, 0xff, 0x1c, 0x6a, 0x93, 0xea, 0xd9, 0x8a, 0x6a,
	0x0f, 0xc0, 0xa8, 0x4b, 0x91, 0x29, 0x85, 0xae, 0x43, 0x37, 0xf1, 0x53, 0x29, 0xd2, 0x99, 0xa4,
	0x2b, 0xeb, 0x37, 0x0d, 0x74, 0xd9, 0x29, 0x71, 0x40, 0xe8, 0x3c, 0x3b, 0x95, 0x5e, 0xf2, 0xaf,
	0x74, 0x5c, 0x1a, 0xe4, 0xb2, 0x36, 0x9d, 0x8a, 0x36, 0x15, 0x32, 0x16, 0x98, 0xcb, 0xbc, 0xca,
	0x83, 0xff, 0x5a, 0x4b, 0x19, 0xd7, 0x12, 0x5a, 0x8e, 0x8f, 0x15, 0xce, 0x37, 0x36, 0xe3, 0xd6,
	0xb2, 0x66, 0x9c, 0x4d, 0xad, 0xb6, 0xd9, 0xfe, 0xc8, 0xa9, 0x55, 0xe1, 0x74, 0x07, 0xac, 0xe5,
	0xee, 0x66, 0xac, 0xc6, 0xaf, 0xba, 0xd0, 0x3e, 0x10, 0x1e, 0x62, 0x70, 0xa5, 0x69, 0xda, 0xdf,
	0x29, 0xbf, 0xdf, 0x3c, 0xe4, 0x8c, 0xfb, 0xeb, 0xa0, 0xf2, 0xdc, 0x78, 0x0e, 0x17, 0x2b, 0x63,
	0x70, 0x58, 0x3b, 0x5f, 0x06, 0x18, 0x77, 0x3f, 0x00, 0xc8, 0xef, 0x66, 0x70, 0xa5, 0xa9, 0x87,
	0xd6, 0x69, 0x34, 0xa0, 0x1a, 0x68, 0xac, 0xe8, 0x5e, 0xe8, 0x27, 0x0d, 0x6e, 0xad, 0x6a, 0x5d,
	0xf5, 0xdb, 0x56, 0xa0, 0x8d, 0x07, 0x1f, 0x83, 0xce, 0x7d, 0x88, 0xe1, 0xc6, 0xb2, 0x7c, 0x1c,
	0xad, 0x43, 0x46, 0x22, 0x8d, 0xcf, 0xd6, 0x45, 0xe6, 0xcf, 0x7e, 0x07, 0x97, 0xaa, 0x3d, 0xd0,
	0x6c, 0xb8, 0xa4, 0x84, 0x30, 0x46, 0x1f, 0x42, 0xe4, 0xd7, 0x73, 0xb8, 0xd6, 0xdc, 0x20, 0x76,
	0xea, 0x79, 0xd6, 0x84, 0x33, 0xec, 0xf5, 0x70, 0xd9, 0x83, 0xc6, 0xe6, 0x8f, 0xef, 0xde, 0xdc,
	0xd3, 0x76, 0x1f, 0x9d, 0x9c, 0x0d, 0xb4, 0xd3, 0xb3, 0x81, 0xf6, 0xd7, 0xd9, 0x40, 0xfb, 0xf5,
	0x7c, 0xb0, 0x71, 0x7a, 0x3e, 0xd8, 0xf8, 0xe3, 0x7c, 0xb0, 0xf1, 0xfc, 0xae, 0xc7, 0xa2, 0x59,
	0x3c, 0xb5, 0x09, 0xf7, 0x1d, 0x81, 0x3d, 0x7c, 0x74, 0xfc, 0x83, 0x23, 0xff, 0x45, 0x1f, 0x15,
	0xfe, 0xdf, 0x1f, 0x2f, 0xa8, 0x98, 0x76, 0x55, 0x47, 0xfd, 0xe2, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xc7, 0xb8, 0x9d, 0x81, 0xfc, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateChainletStack(ctx context.Context, in *MsgCreateChainletStack, opts ...grpc.CallOption) (*MsgCreateChainletStackResponse, error)
	LaunchChainlet(ctx context.Context, in *MsgLaunchChainlet, opts ...grpc.CallOption) (*MsgLaunchChainletResponse, error)
	UpdateChainletStack(ctx context.Context, in *MsgUpdateChainletStack, opts ...grpc.CallOption) (*MsgUpdateChainletStackResponse, error)
	DisableChainletStackVersion(ctx context.Context, in *MsgDisableChainletStackVersion, opts ...grpc.CallOption) (*MsgDisableChainletStackVersionResponse, error)
	UpdateChainletStackFees(ctx context.Context, in *MsgUpdateChainletStackFees, opts ...grpc.CallOption) (*MsgUpdateChainletStackFeesResponse, error)
	UpgradeChainlet(ctx context.Context, in *MsgUpgradeChainlet, opts ...grpc.CallOption) (*MsgUpgradeChainletResponse, error)
	CancelChainletUpgrade(ctx context.Context, in *MsgCancelChainletUpgrade, opts ...grpc.CallOption) (*MsgCancelChainletUpgradeResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateChainletStack(ctx context.Context, in *MsgCreateChainletStack, opts ...grpc.CallOption) (*MsgCreateChainletStackResponse, error) {
	out := new(MsgCreateChainletStackResponse)
	err := c.cc.Invoke(ctx, "/ssc.chainlet.Msg/CreateChainletStack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LaunchChainlet(ctx context.Context, in *MsgLaunchChainlet, opts ...grpc.CallOption) (*MsgLaunchChainletResponse, error) {
	out := new(MsgLaunchChainletResponse)
	err := c.cc.Invoke(ctx, "/ssc.chainlet.Msg/LaunchChainlet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateChainletStack(ctx context.Context, in *MsgUpdateChainletStack, opts ...grpc.CallOption) (*MsgUpdateChainletStackResponse, error) {
	out := new(MsgUpdateChainletStackResponse)
	err := c.cc.Invoke(ctx, "/ssc.chainlet.Msg/UpdateChainletStack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableChainletStackVersion(ctx context.Context, in *MsgDisableChainletStackVersion, opts ...grpc.CallOption) (*MsgDisableChainletStackVersionResponse, error) {
	out := new(MsgDisableChainletStackVersionResponse)
	err := c.cc.Invoke(ctx, "/ssc.chainlet.Msg/DisableChainletStackVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateChainletStackFees(ctx context.Context, in *MsgUpdateChainletStackFees, opts ...grpc.CallOption) (*MsgUpdateChainletStackFeesResponse, error) {
	out := new(MsgUpdateChainletStackFeesResponse)
	err := c.cc.Invoke(ctx, "/ssc.chainlet.Msg/UpdateChainletStackFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpgradeChainlet(ctx context.Context, in *MsgUpgradeChainlet, opts ...grpc.CallOption) (*MsgUpgradeChainletResponse, error) {
	out := new(MsgUpgradeChainletResponse)
	err := c.cc.Invoke(ctx, "/ssc.chainlet.Msg/UpgradeChainlet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CancelChainletUpgrade(ctx context.Context, in *MsgCancelChainletUpgrade, opts ...grpc.CallOption) (*MsgCancelChainletUpgradeResponse, error) {
	out := new(MsgCancelChainletUpgradeResponse)
	err := c.cc.Invoke(ctx, "/ssc.chainlet.Msg/CancelChainletUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateChainletStack(context.Context, *MsgCreateChainletStack) (*MsgCreateChainletStackResponse, error)
	LaunchChainlet(context.Context, *MsgLaunchChainlet) (*MsgLaunchChainletResponse, error)
	UpdateChainletStack(context.Context, *MsgUpdateChainletStack) (*MsgUpdateChainletStackResponse, error)
	DisableChainletStackVersion(context.Context, *MsgDisableChainletStackVersion) (*MsgDisableChainletStackVersionResponse, error)
	UpdateChainletStackFees(context.Context, *MsgUpdateChainletStackFees) (*MsgUpdateChainletStackFeesResponse, error)
	UpgradeChainlet(context.Context, *MsgUpgradeChainlet) (*MsgUpgradeChainletResponse, error)
	CancelChainletUpgrade(context.Context, *MsgCancelChainletUpgrade) (*MsgCancelChainletUpgradeResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateChainletStack(ctx context.Context, req *MsgCreateChainletStack) (*MsgCreateChainletStackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChainletStack not implemented")
}
func (*UnimplementedMsgServer) LaunchChainlet(ctx context.Context, req *MsgLaunchChainlet) (*MsgLaunchChainletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchChainlet not implemented")
}
func (*UnimplementedMsgServer) UpdateChainletStack(ctx context.Context, req *MsgUpdateChainletStack) (*MsgUpdateChainletStackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChainletStack not implemented")
}
func (*UnimplementedMsgServer) DisableChainletStackVersion(ctx context.Context, req *MsgDisableChainletStackVersion) (*MsgDisableChainletStackVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableChainletStackVersion not implemented")
}
func (*UnimplementedMsgServer) UpdateChainletStackFees(ctx context.Context, req *MsgUpdateChainletStackFees) (*MsgUpdateChainletStackFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChainletStackFees not implemented")
}
func (*UnimplementedMsgServer) UpgradeChainlet(ctx context.Context, req *MsgUpgradeChainlet) (*MsgUpgradeChainletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpgradeChainlet not implemented")
}
func (*UnimplementedMsgServer) CancelChainletUpgrade(ctx context.Context, req *MsgCancelChainletUpgrade) (*MsgCancelChainletUpgradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelChainletUpgrade not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateChainletStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateChainletStack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateChainletStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssc.chainlet.Msg/CreateChainletStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateChainletStack(ctx, req.(*MsgCreateChainletStack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LaunchChainlet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLaunchChainlet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LaunchChainlet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssc.chainlet.Msg/LaunchChainlet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LaunchChainlet(ctx, req.(*MsgLaunchChainlet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateChainletStack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateChainletStack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateChainletStack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssc.chainlet.Msg/UpdateChainletStack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateChainletStack(ctx, req.(*MsgUpdateChainletStack))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableChainletStackVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableChainletStackVersion)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableChainletStackVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssc.chainlet.Msg/DisableChainletStackVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableChainletStackVersion(ctx, req.(*MsgDisableChainletStackVersion))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateChainletStackFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateChainletStackFees)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateChainletStackFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssc.chainlet.Msg/UpdateChainletStackFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateChainletStackFees(ctx, req.(*MsgUpdateChainletStackFees))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpgradeChainlet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpgradeChainlet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpgradeChainlet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssc.chainlet.Msg/UpgradeChainlet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpgradeChainlet(ctx, req.(*MsgUpgradeChainlet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CancelChainletUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCancelChainletUpgrade)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CancelChainletUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ssc.chainlet.Msg/CancelChainletUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CancelChainletUpgrade(ctx, req.(*MsgCancelChainletUpgrade))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ssc.chainlet.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChainletStack",
			Handler:    _Msg_CreateChainletStack_Handler,
		},
		{
			MethodName: "LaunchChainlet",
			Handler:    _Msg_LaunchChainlet_Handler,
		},
		{
			MethodName: "UpdateChainletStack",
			Handler:    _Msg_UpdateChainletStack_Handler,
		},
		{
			MethodName: "DisableChainletStackVersion",
			Handler:    _Msg_DisableChainletStackVersion_Handler,
		},
		{
			MethodName: "UpdateChainletStackFees",
			Handler:    _Msg_UpdateChainletStackFees_Handler,
		},
		{
			MethodName: "UpgradeChainlet",
			Handler:    _Msg_UpgradeChainlet_Handler,
		},
		{
			MethodName: "CancelChainletUpgrade",
			Handler:    _Msg_CancelChainletUpgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssc/chainlet/tx.proto",
}

func (m *MsgCreateChainletStack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateChainletStack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateChainletStack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CcvConsumer {
		i--
		if m.CcvConsumer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.Fees.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateChainletStackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateChainletStackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateChainletStackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLaunchChainlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLaunchChainlet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLaunchChainlet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CustomLauncher) > 0 {
		i -= len(m.CustomLauncher)
		copy(dAtA[i:], m.CustomLauncher)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CustomLauncher)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Tags) > 0 {
		for iNdEx := len(m.Tags) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tags[iNdEx])
			copy(dAtA[i:], m.Tags[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Tags[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.IsServiceChainlet {
		i--
		if m.IsServiceChainlet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.DisableAutomaticStackUpgrades {
		i--
		if m.DisableAutomaticStackUpgrades {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Maintainers) > 0 {
		for iNdEx := len(m.Maintainers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Maintainers[iNdEx])
			copy(dAtA[i:], m.Maintainers[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Maintainers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ChainletStackVersion) > 0 {
		i -= len(m.ChainletStackVersion)
		copy(dAtA[i:], m.ChainletStackVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainletStackVersion)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChainletStackName) > 0 {
		i -= len(m.ChainletStackName)
		copy(dAtA[i:], m.ChainletStackName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainletStackName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainletName) > 0 {
		i -= len(m.ChainletName)
		copy(dAtA[i:], m.ChainletName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainletName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLaunchChainletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLaunchChainletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLaunchChainletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainletStack) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainletStack) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainletStack) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CcvConsumer {
		i--
		if m.CcvConsumer {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.Checksum) > 0 {
		i -= len(m.Checksum)
		copy(dAtA[i:], m.Checksum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Checksum)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Image) > 0 {
		i -= len(m.Image)
		copy(dAtA[i:], m.Image)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Image)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainletStackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainletStackResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainletStackResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisableChainletStackVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableChainletStackVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableChainletStackVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DisplayName) > 0 {
		i -= len(m.DisplayName)
		copy(dAtA[i:], m.DisplayName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DisplayName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDisableChainletStackVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableChainletStackVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableChainletStackVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeChainlet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeChainlet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeChainlet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingPeriod != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(*m.UnbondingPeriod, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.UnbondingPeriod):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintTx(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.HeightDelta != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.HeightDelta))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StackVersion) > 0 {
		i -= len(m.StackVersion)
		copy(dAtA[i:], m.StackVersion)
		i = encodeVarintTx(dAtA, i, uint64(len(m.StackVersion)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpgradeChainletResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpgradeChainletResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpgradeChainletResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelChainletUpgrade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelChainletUpgrade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelChainletUpgrade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelChainletUpgradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelChainletUpgradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelChainletUpgradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainletStackFees) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainletStackFees) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainletStackFees) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Fees) > 0 {
		for iNdEx := len(m.Fees) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fees[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ChainletStackName) > 0 {
		i -= len(m.ChainletStackName)
		copy(dAtA[i:], m.ChainletStackName)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ChainletStackName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateChainletStackFeesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateChainletStackFeesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateChainletStackFeesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateChainletStack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Fees.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.CcvConsumer {
		n += 2
	}
	return n
}

func (m *MsgCreateChainletStackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLaunchChainlet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainletName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainletStackName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainletStackVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Maintainers) > 0 {
		for _, s := range m.Maintainers {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DisableAutomaticStackUpgrades {
		n += 2
	}
	if m.IsServiceChainlet {
		n += 2
	}
	if len(m.Tags) > 0 {
		for _, s := range m.Tags {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.CustomLauncher)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLaunchChainletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateChainletStack) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Image)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Checksum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CcvConsumer {
		n += 2
	}
	return n
}

func (m *MsgUpdateChainletStackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisableChainletStackVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DisplayName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDisableChainletStackVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpgradeChainlet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.StackVersion)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.HeightDelta != 0 {
		n += 1 + sovTx(uint64(m.HeightDelta))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UnbondingPeriod != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(*m.UnbondingPeriod)
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpgradeChainletResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	return n
}

func (m *MsgCancelChainletUpgrade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCancelChainletUpgradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateChainletStackFees) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ChainletStackName)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Fees) > 0 {
		for _, e := range m.Fees {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateChainletStackFeesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateChainletStack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateChainletStack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateChainletStack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CcvConsumer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CcvConsumer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateChainletStackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateChainletStackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateChainletStackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLaunchChainlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLaunchChainlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLaunchChainlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletStackName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletStackName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletStackVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletStackVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maintainers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maintainers = append(m.Maintainers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableAutomaticStackUpgrades", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableAutomaticStackUpgrades = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsServiceChainlet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsServiceChainlet = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomLauncher", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomLauncher = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLaunchChainletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLaunchChainletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLaunchChainletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainletStack) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainletStack: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainletStack: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Image", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Image = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checksum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CcvConsumer", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CcvConsumer = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainletStackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainletStackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainletStackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableChainletStackVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableChainletStackVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableChainletStackVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisplayName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisplayName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableChainletStackVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableChainletStackVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableChainletStackVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeChainlet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeChainlet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeChainlet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StackVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightDelta", wireType)
			}
			m.HeightDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightDelta |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UnbondingPeriod == nil {
				m.UnbondingPeriod = new(time.Duration)
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(m.UnbondingPeriod, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpgradeChainletResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpgradeChainletResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpgradeChainletResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelChainletUpgrade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelChainletUpgrade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelChainletUpgrade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelChainletUpgradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelChainletUpgradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelChainletUpgradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainletStackFees) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainletStackFees: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainletStackFees: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainletStackName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainletStackName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fees", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fees = append(m.Fees, ChainletStackFees{})
			if err := m.Fees[len(m.Fees)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateChainletStackFeesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateChainletStackFeesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateChainletStackFeesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
