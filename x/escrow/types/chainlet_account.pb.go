// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/escrow/chainlet_account.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainletAccount struct {
	ChainId string                      `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Balance types.Coin                  `protobuf:"bytes,2,opt,name=balance,proto3" json:"balance"`
	Shares  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
	Funders map[string]Funder           `protobuf:"bytes,4,rep,name=funders,proto3" json:"funders" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ChainletAccount) Reset()         { *m = ChainletAccount{} }
func (m *ChainletAccount) String() string { return proto.CompactTextString(m) }
func (*ChainletAccount) ProtoMessage()    {}
func (*ChainletAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_229301979046d517, []int{0}
}
func (m *ChainletAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainletAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainletAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainletAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainletAccount.Merge(m, src)
}
func (m *ChainletAccount) XXX_Size() int {
	return m.Size()
}
func (m *ChainletAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainletAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ChainletAccount proto.InternalMessageInfo

func (m *ChainletAccount) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ChainletAccount) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

func (m *ChainletAccount) GetFunders() map[string]Funder {
	if m != nil {
		return m.Funders
	}
	return nil
}

type Funder struct {
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *Funder) Reset()         { *m = Funder{} }
func (m *Funder) String() string { return proto.CompactTextString(m) }
func (*Funder) ProtoMessage()    {}
func (*Funder) Descriptor() ([]byte, []int) {
	return fileDescriptor_229301979046d517, []int{1}
}
func (m *Funder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funder.Merge(m, src)
}
func (m *Funder) XXX_Size() int {
	return m.Size()
}
func (m *Funder) XXX_DiscardUnknown() {
	xxx_messageInfo_Funder.DiscardUnknown(m)
}

var xxx_messageInfo_Funder proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ChainletAccount)(nil), "ssc.escrow.ChainletAccount")
	proto.RegisterMapType((map[string]Funder)(nil), "ssc.escrow.ChainletAccount.FundersEntry")
	proto.RegisterType((*Funder)(nil), "ssc.escrow.Funder")
}

func init() { proto.RegisterFile("ssc/escrow/chainlet_account.proto", fileDescriptor_229301979046d517) }

var fileDescriptor_229301979046d517 = []byte{
	// 392 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0x8e, 0x81, 0x81, 0x66, 0x26, 0x6d, 0xb2, 0x76, 0x08, 0x4c, 0x0a, 0x0c, 0x69, 0x52, 0x2e,
	0xb3, 0x05, 0xbb, 0x6c, 0xbb, 0x4c, 0x03, 0x36, 0x15, 0xa9, 0xea, 0x21, 0xbd, 0xf5, 0x82, 0x1c,
	0xe3, 0x26, 0x11, 0x10, 0xa3, 0xd8, 0xa1, 0xa4, 0xbf, 0xa2, 0x3f, 0xa6, 0x3f, 0x02, 0xa9, 0x17,
	0xd4, 0x53, 0xd5, 0x03, 0xaa, 0xe0, 0x8f, 0x54, 0xc1, 0x8e, 0x8a, 0x7a, 0xed, 0xcd, 0xef, 0x7d,
	0xdf, 0xfb, 0xbe, 0xf7, 0x25, 0x0f, 0x7e, 0x95, 0x92, 0x11, 0x2e, 0x59, 0x22, 0xae, 0x08, 0x0b,
	0x69, 0x14, 0xcf, 0xb8, 0x1a, 0x53, 0xc6, 0x44, 0x1a, 0x2b, 0xbc, 0x48, 0x84, 0x12, 0x08, 0x4a,
	0xc9, 0xb0, 0xa6, 0x34, 0x3f, 0x07, 0x22, 0x10, 0x87, 0x36, 0xc9, 0x5f, 0x9a, 0xd1, 0x74, 0x98,
	0x90, 0x73, 0x21, 0x89, 0x4f, 0x25, 0x27, 0xcb, 0xae, 0xcf, 0x15, 0xed, 0x12, 0x26, 0xa2, 0xd8,
	0xe0, 0x0d, 0x8d, 0x8f, 0xf5, 0xa0, 0x2e, 0x34, 0xd4, 0xb9, 0x2b, 0xc1, 0x8f, 0x03, 0xe3, 0xfb,
	0x57, 0xdb, 0x22, 0x1b, 0xd6, 0x0e, 0xab, 0x8c, 0x26, 0x36, 0x68, 0x03, 0xf7, 0xbd, 0x57, 0x94,
	0xe8, 0x17, 0xac, 0xf9, 0x74, 0x46, 0x63, 0xc6, 0xed, 0x52, 0x1b, 0xb8, 0xf5, 0x5e, 0x03, 0x1b,
	0xb5, 0xdc, 0x1a, 0x1b, 0x6b, 0x3c, 0x10, 0x51, 0xdc, 0xaf, 0xac, 0xb7, 0x2d, 0xcb, 0x2b, 0xf8,
	0x68, 0x04, 0xab, 0x32, 0xa4, 0x09, 0x97, 0x76, 0x39, 0xd7, 0xec, 0x77, 0x73, 0xf8, 0x71, 0xdb,
	0xfa, 0xa2, 0x05, 0xe4, 0x64, 0x8a, 0x23, 0x41, 0xe6, 0x54, 0x85, 0xf8, 0x94, 0x07, 0x94, 0x65,
	0x43, 0xce, 0xee, 0x6f, 0xbf, 0x43, 0xa3, 0x3f, 0xe4, 0xcc, 0x33, 0x02, 0xe8, 0x04, 0xd6, 0x2e,
	0xd3, 0x78, 0xc2, 0x13, 0x69, 0x57, 0xda, 0x65, 0xb7, 0xde, 0x73, 0xf1, 0xcb, 0x27, 0xc2, 0xaf,
	0xd2, 0xe0, 0xff, 0x9a, 0xfa, 0x2f, 0x56, 0x49, 0x56, 0x2c, 0x65, 0xc6, 0x9b, 0x67, 0xf0, 0xc3,
	0x31, 0x8c, 0x3e, 0xc1, 0xf2, 0x94, 0x67, 0x26, 0x75, 0xfe, 0x44, 0x2e, 0x7c, 0xb7, 0xa4, 0xb3,
	0xb4, 0xc8, 0x8b, 0x8e, 0x9d, 0xf4, 0xa8, 0xa7, 0x09, 0xbf, 0x4b, 0x3f, 0x41, 0xe7, 0x1c, 0x56,
	0x75, 0xf3, 0x28, 0x2e, 0x78, 0x63, 0xdc, 0xfe, 0x9f, 0xf5, 0xce, 0x01, 0x9b, 0x9d, 0x03, 0x9e,
	0x76, 0x0e, 0xb8, 0xd9, 0x3b, 0xd6, 0x66, 0xef, 0x58, 0x0f, 0x7b, 0xc7, 0xba, 0xf8, 0x16, 0x44,
	0x2a, 0x4c, 0x7d, 0xcc, 0xc4, 0x9c, 0x48, 0x1a, 0xd0, 0x55, 0x76, 0x4d, 0xf2, 0x7b, 0x5a, 0x15,
	0x17, 0xa5, 0xb2, 0x05, 0x97, 0x7e, 0xf5, 0xf0, 0xab, 0x7f, 0x3c, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xc8, 0xf8, 0xac, 0xcc, 0x6c, 0x02, 0x00, 0x00,
}

func (m *ChainletAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainletAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Funders) > 0 {
		for k := range m.Funders {
			v := m.Funders[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChainletAccount(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintChainletAccount(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintChainletAccount(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintChainletAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChainletAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintChainletAccount(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Funder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintChainletAccount(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintChainletAccount(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainletAccount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainletAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovChainletAccount(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovChainletAccount(uint64(l))
	l = m.Shares.Size()
	n += 1 + l + sovChainletAccount(uint64(l))
	if len(m.Funders) > 0 {
		for k, v := range m.Funders {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovChainletAccount(uint64(len(k))) + 1 + l + sovChainletAccount(uint64(l))
			n += mapEntrySize + 1 + sovChainletAccount(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Funder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shares.Size()
	n += 1 + l + sovChainletAccount(uint64(l))
	return n
}

func sovChainletAccount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainletAccount(x uint64) (n int) {
	return sovChainletAccount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainletAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainletAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainletAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainletAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainletAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainletAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Funders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainletAccount
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainletAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Funders == nil {
				m.Funders = make(map[string]Funder)
			}
			var mapkey string
			mapvalue := &Funder{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChainletAccount
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChainletAccount
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChainletAccount
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthChainletAccount
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChainletAccount
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChainletAccount
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthChainletAccount
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Funder{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChainletAccount(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthChainletAccount
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Funders[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainletAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainletAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Funder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainletAccount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainletAccount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainletAccount
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainletAccount
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainletAccount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainletAccount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainletAccount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainletAccount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainletAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainletAccount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainletAccount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainletAccount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainletAccount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainletAccount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainletAccount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainletAccount = fmt.Errorf("proto: unexpected end of group")
)
