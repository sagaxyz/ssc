// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssc/escrow/escrow.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainletAccount struct {
	ChainId string `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
}

func (m *ChainletAccount) Reset()         { *m = ChainletAccount{} }
func (m *ChainletAccount) String() string { return proto.CompactTextString(m) }
func (*ChainletAccount) ProtoMessage()    {}
func (*ChainletAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc2843f63262f3b7, []int{0}
}
func (m *ChainletAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainletAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainletAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainletAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainletAccount.Merge(m, src)
}
func (m *ChainletAccount) XXX_Size() int {
	return m.Size()
}
func (m *ChainletAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainletAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ChainletAccount proto.InternalMessageInfo

func (m *ChainletAccount) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

// One row per {chainId, denom, funderAddr}.
// KV: escrow/funder/{chainId}/{denom}/{addr}
type Funder struct {
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *Funder) Reset()         { *m = Funder{} }
func (m *Funder) String() string { return proto.CompactTextString(m) }
func (*Funder) ProtoMessage()    {}
func (*Funder) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc2843f63262f3b7, []int{1}
}
func (m *Funder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Funder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Funder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Funder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Funder.Merge(m, src)
}
func (m *Funder) XXX_Size() int {
	return m.Size()
}
func (m *Funder) XXX_DiscardUnknown() {
	xxx_messageInfo_Funder.DiscardUnknown(m)
}

var xxx_messageInfo_Funder proto.InternalMessageInfo

// One pool per {chainId, denom}. Tracks totals
// KV: escrow/pool/{chainId}/{denom}
type DenomPool struct {
	ChainId string                      `protobuf:"bytes,1,opt,name=chainId,proto3" json:"chainId,omitempty"`
	Denom   string                      `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Balance types.Coin                  `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance"`
	Shares  cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *DenomPool) Reset()         { *m = DenomPool{} }
func (m *DenomPool) String() string { return proto.CompactTextString(m) }
func (*DenomPool) ProtoMessage()    {}
func (*DenomPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc2843f63262f3b7, []int{2}
}
func (m *DenomPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DenomPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DenomPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DenomPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DenomPool.Merge(m, src)
}
func (m *DenomPool) XXX_Size() int {
	return m.Size()
}
func (m *DenomPool) XXX_DiscardUnknown() {
	xxx_messageInfo_DenomPool.DiscardUnknown(m)
}

var xxx_messageInfo_DenomPool proto.InternalMessageInfo

func (m *DenomPool) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *DenomPool) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *DenomPool) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*ChainletAccount)(nil), "ssc.escrow.ChainletAccount")
	proto.RegisterType((*Funder)(nil), "ssc.escrow.Funder")
	proto.RegisterType((*DenomPool)(nil), "ssc.escrow.DenomPool")
}

func init() { proto.RegisterFile("ssc/escrow/escrow.proto", fileDescriptor_bc2843f63262f3b7) }

var fileDescriptor_bc2843f63262f3b7 = []byte{
	// 341 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x51, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0xdd, 0x68, 0x6d, 0x69, 0x3c, 0x08, 0x4b, 0xc1, 0x6d, 0x85, 0xb4, 0x14, 0x84, 0x82, 0x98,
	0x50, 0x3d, 0x79, 0x12, 0xdb, 0x22, 0x14, 0x3c, 0x48, 0xbd, 0x79, 0x91, 0x6c, 0x36, 0xec, 0x2e,
	0x76, 0x33, 0x65, 0x93, 0x6a, 0xeb, 0x57, 0xf8, 0x31, 0xfe, 0x80, 0xb7, 0x1e, 0x8b, 0x27, 0xf1,
	0x50, 0xa4, 0xfd, 0x11, 0xd9, 0x66, 0x17, 0xbc, 0x78, 0xf2, 0x94, 0xcc, 0x7b, 0x2f, 0xf3, 0x32,
	0xf3, 0xf0, 0xa1, 0xd6, 0x82, 0x49, 0x2d, 0x52, 0x78, 0xce, 0x0f, 0x3a, 0x49, 0xc1, 0x80, 0x8b,
	0xb5, 0x16, 0xd4, 0x22, 0x8d, 0x5a, 0x08, 0x21, 0x6c, 0x61, 0x96, 0xdd, 0xac, 0xa2, 0x41, 0x04,
	0xe8, 0x04, 0x34, 0xf3, 0xb9, 0x96, 0xec, 0xa9, 0xeb, 0x4b, 0xc3, 0xbb, 0x4c, 0x40, 0xac, 0x72,
	0xbe, 0x6e, 0xf9, 0x07, 0xfb, 0xd0, 0x16, 0x96, 0x6a, 0x9f, 0xe0, 0x83, 0x7e, 0xc4, 0x63, 0x35,
	0x96, 0xe6, 0x4a, 0x08, 0x98, 0x2a, 0xe3, 0x7a, 0xb8, 0x22, 0x32, 0x68, 0x18, 0x78, 0xa8, 0x85,
	0x3a, 0xd5, 0x51, 0x51, 0xb6, 0xef, 0x70, 0xf9, 0x7a, 0xaa, 0x02, 0x99, 0xba, 0x43, 0x5c, 0xd6,
	0x11, 0x4f, 0xa5, 0xb6, 0x92, 0x5e, 0x77, 0xb1, 0x6a, 0x3a, 0x5f, 0xab, 0xe6, 0x91, 0x6d, 0xae,
	0x83, 0x47, 0x1a, 0x03, 0x4b, 0xb8, 0x89, 0xe8, 0x8d, 0x0c, 0xb9, 0x98, 0x0f, 0xa4, 0xf8, 0x78,
	0x3b, 0xc5, 0xb9, 0xf7, 0x40, 0x8a, 0x51, 0xde, 0xa0, 0xfd, 0x8e, 0x70, 0x75, 0x20, 0x15, 0x24,
	0xb7, 0x00, 0xe3, 0xbf, 0xcd, 0xdd, 0x1a, 0xde, 0x0b, 0x32, 0x99, 0xb7, 0xb3, 0xc5, 0x6d, 0xe1,
	0x5e, 0xe0, 0x8a, 0xcf, 0xc7, 0x5c, 0x09, 0xe9, 0xed, 0xb6, 0x50, 0x67, 0xff, 0xac, 0x4e, 0x73,
	0x8f, 0x6c, 0x19, 0x34, 0x5f, 0x06, 0xed, 0x43, 0xac, 0x7a, 0xa5, 0xec, 0x93, 0xa3, 0x42, 0xff,
	0x6b, 0x86, 0xd2, 0x3f, 0x67, 0xe8, 0x5d, 0x2e, 0xd6, 0x04, 0x2d, 0xd7, 0x04, 0x7d, 0xaf, 0x09,
	0x7a, 0xdd, 0x10, 0x67, 0xb9, 0x21, 0xce, 0xe7, 0x86, 0x38, 0xf7, 0xc7, 0x61, 0x6c, 0xa2, 0xa9,
	0x4f, 0x05, 0x24, 0x4c, 0xf3, 0x90, 0xcf, 0xe6, 0x2f, 0x2c, 0x0b, 0x7a, 0x56, 0x44, 0x6d, 0xe6,
	0x13, 0xa9, 0xfd, 0xf2, 0x36, 0x8d, 0xf3, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0x88, 0x77,
	0x15, 0x05, 0x02, 0x00, 0x00,
}

func (m *ChainletAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainletAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainletAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Funder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Funder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Funder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEscrow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *DenomPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DenomPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DenomPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEscrow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintEscrow(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintEscrow(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEscrow(dAtA []byte, offset int, v uint64) int {
	offset -= sovEscrow(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainletAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	return n
}

func (m *Funder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shares.Size()
	n += 1 + l + sovEscrow(uint64(l))
	return n
}

func (m *DenomPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovEscrow(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovEscrow(uint64(l))
	l = m.Shares.Size()
	n += 1 + l + sovEscrow(uint64(l))
	return n
}

func sovEscrow(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEscrow(x uint64) (n int) {
	return sovEscrow(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainletAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainletAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainletAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Funder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Funder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Funder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DenomPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DenomPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DenomPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEscrow
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEscrow
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEscrow(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEscrow
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEscrow(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEscrow
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEscrow
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEscrow
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEscrow
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEscrow
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEscrow        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEscrow          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEscrow = fmt.Errorf("proto: unexpected end of group")
)
