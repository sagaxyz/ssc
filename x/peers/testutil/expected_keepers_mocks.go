// Code generated by MockGen. DO NOT EDIT.
// Source: x/peers/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/sagaxyz/ssc/x/chainlet/types"
)

// MockChainletKeeper is a mock of ChainletKeeper interface.
type MockChainletKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockChainletKeeperMockRecorder
}

// MockChainletKeeperMockRecorder is the mock recorder for MockChainletKeeper.
type MockChainletKeeperMockRecorder struct {
	mock *MockChainletKeeper
}

// NewMockChainletKeeper creates a new mock instance.
func NewMockChainletKeeper(ctrl *gomock.Controller) *MockChainletKeeper {
	mock := &MockChainletKeeper{ctrl: ctrl}
	mock.recorder = &MockChainletKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainletKeeper) EXPECT() *MockChainletKeeperMockRecorder {
	return m.recorder
}

// Chainlet mocks base method.
func (m *MockChainletKeeper) Chainlet(ctx types.Context, chainId string) (types0.Chainlet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chainlet", ctx, chainId)
	ret0, _ := ret[0].(types0.Chainlet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chainlet indicates an expected call of Chainlet.
func (mr *MockChainletKeeperMockRecorder) Chainlet(ctx, chainId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chainlet", reflect.TypeOf((*MockChainletKeeper)(nil).Chainlet), ctx, chainId)
}

// MockStakingHooks is a mock of StakingHooks interface.
type MockStakingHooks struct {
	ctrl     *gomock.Controller
	recorder *MockStakingHooksMockRecorder
}

// MockStakingHooksMockRecorder is the mock recorder for MockStakingHooks.
type MockStakingHooksMockRecorder struct {
	mock *MockStakingHooks
}

// NewMockStakingHooks creates a new mock instance.
func NewMockStakingHooks(ctrl *gomock.Controller) *MockStakingHooks {
	mock := &MockStakingHooks{ctrl: ctrl}
	mock.recorder = &MockStakingHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakingHooks) EXPECT() *MockStakingHooksMockRecorder {
	return m.recorder
}

// AfterValidatorRemoved mocks base method.
func (m *MockStakingHooks) AfterValidatorRemoved(ctx context.Context, consAddr types.ConsAddress, valAddr types.ValAddress) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterValidatorRemoved", ctx, consAddr, valAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// AfterValidatorRemoved indicates an expected call of AfterValidatorRemoved.
func (mr *MockStakingHooksMockRecorder) AfterValidatorRemoved(ctx, consAddr, valAddr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterValidatorRemoved", reflect.TypeOf((*MockStakingHooks)(nil).AfterValidatorRemoved), ctx, consAddr, valAddr)
}
